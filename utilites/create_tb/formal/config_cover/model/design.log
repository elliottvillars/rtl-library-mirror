
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 000fd08198, g++ 9.3.0 -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: foo.v
Parsing formal SystemVerilog input from `foo.v' to AST representation.
Storing AST representation for module `$abstract\foo'.
Successfully finished Verilog frontend.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\foo'.
Generating RTLIL representation for module `\foo'.

2.2.1. Analyzing design hierarchy..
Top module:  \foo

2.2.2. Analyzing design hierarchy..
Top module:  \foo
Removing unused module `$abstract\foo'.
Removed 1 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).

2.3.5. Executing PROC_ARST pass (detect async resets in processes).

2.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

2.3.8. Executing PROC_DFF pass (convert process syncs to FFs).

2.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.4. Executing OPT_EXPR pass (perform const folding).

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).

2.6. Executing CHECK pass (checking for obvious problems).
found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Removed a total of 0 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Removed 0 multiplexer ports.

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Removed a total of 0 cells.

2.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).

2.7.7. Executing OPT_EXPR pass (perform const folding).

2.7.8. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).

2.9. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.10. Executing OPT_CLEAN pass (remove unused cells and wires).

2.11. Executing MEMORY_COLLECT pass (generating $mem cells).

2.12. Executing OPT pass (performing simple optimizations).

2.12.1. Executing OPT_EXPR pass (perform const folding).

2.12.2. Executing OPT_MERGE pass (detect identical cells).
Removed a total of 0 cells.

2.12.3. Executing OPT_CLEAN pass (remove unused cells and wires).

2.12.4. Finished fast OPT passes.

2.13. Printing statistics.

2.14. Executing CHECK pass (checking for obvious problems).
found and reported 0 problems.

3. Executing MEMORY_NORDFF pass (extracting $dff cells from $mem).

4. Executing ASYNC2SYNC pass.

5. Executing OPT_CLEAN pass (remove unused cells and wires).

6. Executing SETUNDEF pass (replace undef values with defined constants).

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).

7.2. Executing OPT_MERGE pass (detect identical cells).
Removed a total of 0 cells.

7.3. Executing OPT_RMDFF pass (remove dff with constant values).

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).

7.5. Finished fast OPT passes.

8. Executing CHECK pass (checking for obvious problems).
found and reported 0 problems.

9. Executing HIERARCHY pass (managing design hierarchy).

9.1. Analyzing design hierarchy..
Top module:  \foo

9.2. Analyzing design hierarchy..
Top module:  \foo
Removed 0 unused modules.

10. Executing ILANG backend.
Output filename: ../model/design.il

End of script. Logfile hash: 9db588f939, CPU: user 0.02s system 0.00s, MEM: 12.69 MB peak
Yosys 0.9+2406 (git sha1 000fd08198, g++ 9.3.0 -fPIC -Os)
Time spent: 45% 6x opt_clean (0 sec), 37% 5x opt_expr (0 sec), ...
