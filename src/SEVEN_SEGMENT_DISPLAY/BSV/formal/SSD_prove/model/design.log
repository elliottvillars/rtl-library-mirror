
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3675 (git sha1 71ca9a8253, g++ 9.3.0 -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: ./ssd_driver_formal.v
Parsing formal SystemVerilog input from `./ssd_driver_formal.v' to AST representation.
Warning: Found one of those horrible `(synopsys|synthesis) translate_off' comments.
Yosys does support them but it is recommended to use `ifdef constructs instead!
Storing AST representation for module `$abstract\ssd_driver_formal'.
Successfully finished Verilog frontend.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\ssd_driver_formal'.
Generating RTLIL representation for module `\ssd_driver_formal'.
Note: Assuming pure combinatorial block at ./ssd_driver_formal.v:109.3-117.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./ssd_driver_formal.v:121.3-141.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./ssd_driver_formal.v:145.3-153.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.

2.2.1. Analyzing design hierarchy..
Top module:  \ssd_driver_formal

2.2.2. Analyzing design hierarchy..
Top module:  \ssd_driver_formal
Removing unused module `$abstract\ssd_driver_formal'.
Removed 1 unused modules.
Module ssd_driver_formal directly or indirectly contains formal properties -> setting "keep" attribute.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
Cleaned up 1 empty switch.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$./ssd_driver_formal.v:225$43 in module ssd_driver_formal.
Marked 1 switch rules as full_case in process $proc$./ssd_driver_formal.v:178$41 in module ssd_driver_formal.
Removed 1 dead cases from process $proc$./ssd_driver_formal.v:145$30 in module ssd_driver_formal.
Marked 1 switch rules as full_case in process $proc$./ssd_driver_formal.v:145$30 in module ssd_driver_formal.
Removed 1 dead cases from process $proc$./ssd_driver_formal.v:121$27 in module ssd_driver_formal.
Marked 1 switch rules as full_case in process $proc$./ssd_driver_formal.v:121$27 in module ssd_driver_formal.
Removed 1 dead cases from process $proc$./ssd_driver_formal.v:109$24 in module ssd_driver_formal.
Marked 1 switch rules as full_case in process $proc$./ssd_driver_formal.v:109$24 in module ssd_driver_formal.
Removed a total of 3 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 30 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\ssd_driver_formal.$proc$./ssd_driver_formal.v:0$137'.
  Set init value: $formal$./ssd_driver_formal.v:248$23_EN = 1'0
Found init rule in `\ssd_driver_formal.$proc$./ssd_driver_formal.v:0$135'.
  Set init value: $formal$./ssd_driver_formal.v:246$22_EN = 1'0
Found init rule in `\ssd_driver_formal.$proc$./ssd_driver_formal.v:0$133'.
  Set init value: $formal$./ssd_driver_formal.v:244$21_EN = 1'0
Found init rule in `\ssd_driver_formal.$proc$./ssd_driver_formal.v:0$131'.
  Set init value: $formal$./ssd_driver_formal.v:243$20_EN = 1'0
Found init rule in `\ssd_driver_formal.$proc$./ssd_driver_formal.v:0$129'.
  Set init value: $formal$./ssd_driver_formal.v:240$19_EN = 1'0
Found init rule in `\ssd_driver_formal.$proc$./ssd_driver_formal.v:0$127'.
  Set init value: $formal$./ssd_driver_formal.v:236$18_EN = 1'0
Found init rule in `\ssd_driver_formal.$proc$./ssd_driver_formal.v:0$125'.
  Set init value: $formal$./ssd_driver_formal.v:235$17_EN = 1'0
Found init rule in `\ssd_driver_formal.$proc$./ssd_driver_formal.v:0$123'.
  Set init value: $formal$./ssd_driver_formal.v:234$16_EN = 1'0
Found init rule in `\ssd_driver_formal.$proc$./ssd_driver_formal.v:0$121'.
  Set init value: $formal$./ssd_driver_formal.v:233$15_EN = 1'0
Found init rule in `\ssd_driver_formal.$proc$./ssd_driver_formal.v:0$119'.
  Set init value: $formal$./ssd_driver_formal.v:232$14_EN = 1'0
Found init rule in `\ssd_driver_formal.$proc$./ssd_driver_formal.v:0$117'.
  Set init value: $formal$./ssd_driver_formal.v:227$13_EN = 1'0
Found init rule in `\ssd_driver_formal.$proc$./ssd_driver_formal.v:224$116'.
  Set init value: \f_past_data = 1'0

2.3.5. Executing PROC_ARST pass (detect async resets in processes).

2.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:0$137'.
Creating decoders for process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:0$135'.
Creating decoders for process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:0$133'.
Creating decoders for process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:0$131'.
Creating decoders for process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:0$129'.
Creating decoders for process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:0$127'.
Creating decoders for process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:0$125'.
Creating decoders for process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:0$123'.
Creating decoders for process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:0$121'.
Creating decoders for process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:0$119'.
Creating decoders for process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:0$117'.
Creating decoders for process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:224$116'.
Creating decoders for process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
     1/20: $0$formal$./ssd_driver_formal.v:232$14_EN[0:0]$59
     2/20: $0$formal$./ssd_driver_formal.v:232$14_CHECK[0:0]$58
     3/20: $0$formal$./ssd_driver_formal.v:233$15_EN[0:0]$61
     4/20: $0$formal$./ssd_driver_formal.v:233$15_CHECK[0:0]$60
     5/20: $0$formal$./ssd_driver_formal.v:234$16_EN[0:0]$63
     6/20: $0$formal$./ssd_driver_formal.v:234$16_CHECK[0:0]$62
     7/20: $0$formal$./ssd_driver_formal.v:235$17_EN[0:0]$65
     8/20: $0$formal$./ssd_driver_formal.v:235$17_CHECK[0:0]$64
     9/20: $0$formal$./ssd_driver_formal.v:236$18_EN[0:0]$67
    10/20: $0$formal$./ssd_driver_formal.v:236$18_CHECK[0:0]$66
    11/20: $0$formal$./ssd_driver_formal.v:240$19_EN[0:0]$69
    12/20: $0$formal$./ssd_driver_formal.v:240$19_CHECK[0:0]$68
    13/20: $0$formal$./ssd_driver_formal.v:243$20_EN[0:0]$71
    14/20: $0$formal$./ssd_driver_formal.v:243$20_CHECK[0:0]$70
    15/20: $0$formal$./ssd_driver_formal.v:244$21_EN[0:0]$73
    16/20: $0$formal$./ssd_driver_formal.v:244$21_CHECK[0:0]$72
    17/20: $0$formal$./ssd_driver_formal.v:246$22_EN[0:0]$75
    18/20: $0$formal$./ssd_driver_formal.v:246$22_CHECK[0:0]$74
    19/20: $0$formal$./ssd_driver_formal.v:248$23_EN[0:0]$77
    20/20: $0$formal$./ssd_driver_formal.v:248$23_CHECK[0:0]$76
Creating decoders for process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:178$41'.
     1/8: $0\digits_3[3:0]
     2/8: $0\digits_2[3:0]
     3/8: $0\digits_1[3:0]
     4/8: $0\digits_0[3:0]
     5/8: $0\d_switch[1:0]
     6/8: $0\current_digit[3:0]
     7/8: $0\cathodes[6:0]
     8/8: $0\anodes[3:0]
Creating decoders for process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:145$30'.
     1/1: $1\current_digit$D_IN[3:0]$32
Creating decoders for process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:121$27'.
     1/1: $1\cathodes$D_IN[6:0]$29
Creating decoders for process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:109$24'.
     1/1: $1\anodes$D_IN[3:0]$26

2.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\ssd_driver_formal.\current_digit$D_IN' from process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:145$30'.
No latch inferred for signal `\ssd_driver_formal.\cathodes$D_IN' from process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:121$27'.
No latch inferred for signal `\ssd_driver_formal.\anodes$D_IN' from process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:109$24'.

2.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\ssd_driver_formal.\f_past_data' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$330' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$past$./ssd_driver_formal.v:228$1$0' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$331' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$past$./ssd_driver_formal.v:229$2$0' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$332' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$past$./ssd_driver_formal.v:231$3$0' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$333' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$past$./ssd_driver_formal.v:241$4$0' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$334' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$past$./ssd_driver_formal.v:242$5$0' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$335' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$past$./ssd_driver_formal.v:244$6$0' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$336' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$past$./ssd_driver_formal.v:245$7$0' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$337' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$past$./ssd_driver_formal.v:246$8$0' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$338' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$past$./ssd_driver_formal.v:247$9$0' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$339' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$past$./ssd_driver_formal.v:248$10$0' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$340' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$past$./ssd_driver_formal.v:249$11$0' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$341' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$past$./ssd_driver_formal.v:254$12$0' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$342' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$formal$./ssd_driver_formal.v:227$13_CHECK' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$343' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$formal$./ssd_driver_formal.v:227$13_EN' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$344' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$formal$./ssd_driver_formal.v:232$14_CHECK' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$345' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$formal$./ssd_driver_formal.v:232$14_EN' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$346' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$formal$./ssd_driver_formal.v:233$15_CHECK' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$347' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$formal$./ssd_driver_formal.v:233$15_EN' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$348' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$formal$./ssd_driver_formal.v:234$16_CHECK' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$349' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$formal$./ssd_driver_formal.v:234$16_EN' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$350' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$formal$./ssd_driver_formal.v:235$17_CHECK' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$351' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$formal$./ssd_driver_formal.v:235$17_EN' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$352' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$formal$./ssd_driver_formal.v:236$18_CHECK' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$353' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$formal$./ssd_driver_formal.v:236$18_EN' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$354' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$formal$./ssd_driver_formal.v:240$19_CHECK' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$355' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$formal$./ssd_driver_formal.v:240$19_EN' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$356' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$formal$./ssd_driver_formal.v:243$20_CHECK' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$357' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$formal$./ssd_driver_formal.v:243$20_EN' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$358' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$formal$./ssd_driver_formal.v:244$21_CHECK' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$359' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$formal$./ssd_driver_formal.v:244$21_EN' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$360' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$formal$./ssd_driver_formal.v:246$22_CHECK' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$361' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$formal$./ssd_driver_formal.v:246$22_EN' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$362' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$formal$./ssd_driver_formal.v:248$23_CHECK' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$363' with positive edge clock.
Creating register for signal `\ssd_driver_formal.$formal$./ssd_driver_formal.v:248$23_EN' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
  created $dff cell `$procdff$364' with positive edge clock.
Creating register for signal `\ssd_driver_formal.\anodes' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:178$41'.
  created $dff cell `$procdff$365' with positive edge clock.
Creating register for signal `\ssd_driver_formal.\cathodes' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:178$41'.
  created $dff cell `$procdff$366' with positive edge clock.
Creating register for signal `\ssd_driver_formal.\current_digit' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:178$41'.
  created $dff cell `$procdff$367' with positive edge clock.
Creating register for signal `\ssd_driver_formal.\d_switch' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:178$41'.
  created $dff cell `$procdff$368' with positive edge clock.
Creating register for signal `\ssd_driver_formal.\digits_0' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:178$41'.
  created $dff cell `$procdff$369' with positive edge clock.
Creating register for signal `\ssd_driver_formal.\digits_1' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:178$41'.
  created $dff cell `$procdff$370' with positive edge clock.
Creating register for signal `\ssd_driver_formal.\digits_2' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:178$41'.
  created $dff cell `$procdff$371' with positive edge clock.
Creating register for signal `\ssd_driver_formal.\digits_3' using process `\ssd_driver_formal.$proc$./ssd_driver_formal.v:178$41'.
  created $dff cell `$procdff$372' with positive edge clock.

2.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `ssd_driver_formal.$proc$./ssd_driver_formal.v:0$137'.
Removing empty process `ssd_driver_formal.$proc$./ssd_driver_formal.v:0$135'.
Removing empty process `ssd_driver_formal.$proc$./ssd_driver_formal.v:0$133'.
Removing empty process `ssd_driver_formal.$proc$./ssd_driver_formal.v:0$131'.
Removing empty process `ssd_driver_formal.$proc$./ssd_driver_formal.v:0$129'.
Removing empty process `ssd_driver_formal.$proc$./ssd_driver_formal.v:0$127'.
Removing empty process `ssd_driver_formal.$proc$./ssd_driver_formal.v:0$125'.
Removing empty process `ssd_driver_formal.$proc$./ssd_driver_formal.v:0$123'.
Removing empty process `ssd_driver_formal.$proc$./ssd_driver_formal.v:0$121'.
Removing empty process `ssd_driver_formal.$proc$./ssd_driver_formal.v:0$119'.
Removing empty process `ssd_driver_formal.$proc$./ssd_driver_formal.v:0$117'.
Removing empty process `ssd_driver_formal.$proc$./ssd_driver_formal.v:224$116'.
Found and cleaned up 5 empty switches in `\ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
Removing empty process `ssd_driver_formal.$proc$./ssd_driver_formal.v:225$43'.
Found and cleaned up 9 empty switches in `\ssd_driver_formal.$proc$./ssd_driver_formal.v:178$41'.
Removing empty process `ssd_driver_formal.$proc$./ssd_driver_formal.v:178$41'.
Found and cleaned up 1 empty switch in `\ssd_driver_formal.$proc$./ssd_driver_formal.v:145$30'.
Removing empty process `ssd_driver_formal.$proc$./ssd_driver_formal.v:145$30'.
Found and cleaned up 1 empty switch in `\ssd_driver_formal.$proc$./ssd_driver_formal.v:121$27'.
Removing empty process `ssd_driver_formal.$proc$./ssd_driver_formal.v:121$27'.
Found and cleaned up 1 empty switch in `\ssd_driver_formal.$proc$./ssd_driver_formal.v:109$24'.
Removing empty process `ssd_driver_formal.$proc$./ssd_driver_formal.v:109$24'.
Cleaned up 17 empty switches.

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module ssd_driver_formal.
<suppressed ~20 debug messages>

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ssd_driver_formal..
Removed 7 unused cells and 150 unused wires.
<suppressed ~8 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
checking module ssd_driver_formal..
found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ssd_driver_formal.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ssd_driver_formal'.
<suppressed ~27 debug messages>
Removed a total of 9 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ssd_driver_formal..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~28 debug messages>

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ssd_driver_formal.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ssd_driver_formal'.
<suppressed ~48 debug messages>
Removed a total of 16 cells.

2.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ssd_driver_formal..
Removed 0 unused cells and 25 unused wires.
<suppressed ~1 debug messages>

2.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module ssd_driver_formal.

2.7.8. Rerunning OPT passes. (Maybe there is more to do..)

2.7.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ssd_driver_formal..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~23 debug messages>

2.7.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ssd_driver_formal.
Performed a total of 0 changes.

2.7.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ssd_driver_formal'.
Removed a total of 0 cells.

2.7.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ssd_driver_formal..

2.7.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module ssd_driver_formal.

2.7.14. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell ssd_driver_formal.$add$./ssd_driver_formal.v:157$33 ($add).
Removed top 3 bits (of 4) from port B of cell ssd_driver_formal.$add$./ssd_driver_formal.v:161$34 ($add).
Removed top 3 bits (of 4) from port B of cell ssd_driver_formal.$add$./ssd_driver_formal.v:165$35 ($add).
Removed top 3 bits (of 4) from port B of cell ssd_driver_formal.$add$./ssd_driver_formal.v:169$37 ($add).
Removed top 3 bits (of 4) from port B of cell ssd_driver_formal.$add$./ssd_driver_formal.v:173$39 ($add).
Removed top 31 bits (of 32) from port B of cell ssd_driver_formal.$and$./ssd_driver_formal.v:0$79 ($and).
Removed top 31 bits (of 32) from port Y of cell ssd_driver_formal.$and$./ssd_driver_formal.v:0$79 ($and).
Removed top 31 bits (of 32) from port B of cell ssd_driver_formal.$and$./ssd_driver_formal.v:0$81 ($and).
Removed top 31 bits (of 32) from port Y of cell ssd_driver_formal.$and$./ssd_driver_formal.v:0$81 ($and).
Removed top 1 bits (of 4) from port B of cell ssd_driver_formal.$eq$./ssd_driver_formal.v:241$89 ($eq).
Removed top 1 bits (of 2) from port B of cell ssd_driver_formal.$procmux$306_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell ssd_driver_formal.$procmux$317_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell ssd_driver_formal.$procmux$318_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell ssd_driver_formal.$procmux$319_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell ssd_driver_formal.$procmux$320_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell ssd_driver_formal.$procmux$321_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell ssd_driver_formal.$procmux$322_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell ssd_driver_formal.$procmux$323_CMP0 ($eq).
Removed top 31 bits (of 32) from wire ssd_driver_formal.$and$./ssd_driver_formal.v:0$79_Y.
Removed top 31 bits (of 32) from wire ssd_driver_formal.$and$./ssd_driver_formal.v:0$81_Y.

2.9. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ssd_driver_formal..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.11. Executing MEMORY_COLLECT pass (generating $mem cells).

2.12. Executing OPT pass (performing simple optimizations).

2.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ssd_driver_formal.
<suppressed ~2 debug messages>

2.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ssd_driver_formal'.
Removed a total of 0 cells.

2.12.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ssd_driver_formal..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.12.4. Finished fast OPT passes.

2.13. Printing statistics.

=== ssd_driver_formal ===

   Number of wires:                148
   Number of wire bits:            255
   Number of public wires:          31
   Number of public wire bits:      90
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                148
     $add                            5
     $assert                         9
     $assume                         1
     $cover                          1
     $dff                           33
     $eq                            25
     $logic_and                      4
     $logic_not                      8
     $mux                           54
     $ne                             5
     $pmux                           3

2.14. Executing CHECK pass (checking for obvious problems).
checking module ssd_driver_formal..
found and reported 0 problems.

3. Executing MEMORY_NORDFF pass (extracting $dff cells from memories).

4. Executing ASYNC2SYNC pass.

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ssd_driver_formal..
Removed 11 unused cells and 10 unused wires.
<suppressed ~12 debug messages>

6. Executing SETUNDEF pass (replace undef values with defined constants).

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ssd_driver_formal.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ssd_driver_formal'.
Removed a total of 0 cells.

7.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$372 ($dff) from module ssd_driver_formal (D = $procmux$263_Y, Q = \digits_3, rval = 4'0000).
Adding EN signal on $auto$opt_dff.cc:702:run$429 ($sdff) from module ssd_driver_formal (D = \digits_3$D_IN, Q = \digits_3).
Adding SRST signal on $procdff$371 ($dff) from module ssd_driver_formal (D = $procmux$268_Y, Q = \digits_2, rval = 4'0000).
Adding EN signal on $auto$opt_dff.cc:702:run$431 ($sdff) from module ssd_driver_formal (D = \digits_2$D_IN, Q = \digits_2).
Adding SRST signal on $procdff$370 ($dff) from module ssd_driver_formal (D = $procmux$273_Y, Q = \digits_1, rval = 4'0000).
Adding EN signal on $auto$opt_dff.cc:702:run$433 ($sdff) from module ssd_driver_formal (D = \digits_1$D_IN, Q = \digits_1).
Adding SRST signal on $procdff$369 ($dff) from module ssd_driver_formal (D = $procmux$278_Y, Q = \digits_0, rval = 4'0000).
Adding EN signal on $auto$opt_dff.cc:702:run$435 ($sdff) from module ssd_driver_formal (D = \digits_0$D_IN, Q = \digits_0).
Adding SRST signal on $procdff$368 ($dff) from module ssd_driver_formal (D = $procmux$283_Y, Q = \d_switch, rval = 2'00).
Adding EN signal on $auto$opt_dff.cc:702:run$437 ($sdff) from module ssd_driver_formal (D = \d_switch$D_IN, Q = \d_switch).
Adding SRST signal on $procdff$367 ($dff) from module ssd_driver_formal (D = \current_digit$D_IN, Q = \current_digit, rval = 4'0000).
Adding SRST signal on $procdff$366 ($dff) from module ssd_driver_formal (D = \cathodes$D_IN, Q = \cathodes, rval = 7'0000000).
Adding SRST signal on $procdff$365 ($dff) from module ssd_driver_formal (D = \anodes$D_IN, Q = \anodes, rval = 4'0000).
Adding SRST signal on $procdff$364 ($dff) from module ssd_driver_formal (D = $procmux$245_Y, Q = $formal$./ssd_driver_formal.v:248$23_EN, rval = 1'0).
Adding SRST signal on $procdff$362 ($dff) from module ssd_driver_formal (D = $procmux$227_Y, Q = $formal$./ssd_driver_formal.v:246$22_EN, rval = 1'0).
Adding SRST signal on $procdff$358 ($dff) from module ssd_driver_formal (D = $procmux$199_Y, Q = $formal$./ssd_driver_formal.v:243$20_EN, rval = 1'0).
Adding SRST signal on $procdff$346 ($dff) from module ssd_driver_formal (D = $procmux$140_Y, Q = $formal$./ssd_driver_formal.v:232$14_EN, rval = 1'0).

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ssd_driver_formal..
Removed 22 unused cells and 22 unused wires.
<suppressed ~23 debug messages>

7.5. Rerunning OPT passes. (Removed registers in this run.)

7.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module ssd_driver_formal.

7.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ssd_driver_formal'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

7.8. Executing OPT_DFF pass (perform DFF optimizations).

7.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ssd_driver_formal..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

7.10. Finished fast OPT passes.

8. Executing CHECK pass (checking for obvious problems).
checking module ssd_driver_formal..
found and reported 0 problems.

9. Executing HIERARCHY pass (managing design hierarchy).

9.1. Analyzing design hierarchy..
Top module:  \ssd_driver_formal

9.2. Analyzing design hierarchy..
Top module:  \ssd_driver_formal
Removed 0 unused modules.
Module ssd_driver_formal directly or indirectly contains formal properties -> setting "keep" attribute.

10. Executing RTLIL backend.
Output filename: ../model/design.il

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 227fe7a114, CPU: user 0.10s system 0.00s, MEM: 14.41 MB peak
Yosys 0.9+3675 (git sha1 71ca9a8253, g++ 9.3.0 -fPIC -Os)
Time spent: 23% 8x opt_clean (0 sec), 22% 7x opt_expr (0 sec), ...
