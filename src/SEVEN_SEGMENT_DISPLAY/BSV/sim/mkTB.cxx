/*
 * Generated by Bluespec Compiler (build 0000000)
 * 
 * On Sun Nov 22 18:03:37 PST 2020
 * 
 */
#include "bluesim_primitives.h"
#include "mkTB.h"


/* Constructor */
MOD_mkTB::MOD_mkTB(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_counter(simHdl, "counter", this, 32u, 0u, (tUInt8)0u),
    INST_dut_anodes(simHdl, "dut_anodes", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_dut_cathodes(simHdl, "dut_cathodes", this, 7u, (tUInt8)0u, (tUInt8)0u),
    INST_dut_current_digit(simHdl, "dut_current_digit", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_dut_d_switch(simHdl, "dut_d_switch", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_dut_digits_0(simHdl, "dut_digits_0", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_dut_digits_1(simHdl, "dut_digits_1", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_dut_digits_2(simHdl, "dut_digits_2", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_dut_digits_3(simHdl, "dut_digits_3", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_dut_dr_en(simHdl, "dut_dr_en", this, 1u, (tUInt8)0u),
    INST_dut_sw_en(simHdl, "dut_sw_en", this, 1u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 18u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTB::init_symbols_0()
{
  init_symbol(&symbols[0u], "counter", SYM_MODULE, &INST_counter);
  init_symbol(&symbols[1u], "dut_anodes", SYM_MODULE, &INST_dut_anodes);
  init_symbol(&symbols[2u], "dut_cathodes", SYM_MODULE, &INST_dut_cathodes);
  init_symbol(&symbols[3u], "dut_current_digit", SYM_MODULE, &INST_dut_current_digit);
  init_symbol(&symbols[4u], "dut_d_switch", SYM_MODULE, &INST_dut_d_switch);
  init_symbol(&symbols[5u], "dut_digits_0", SYM_MODULE, &INST_dut_digits_0);
  init_symbol(&symbols[6u], "dut_digits_1", SYM_MODULE, &INST_dut_digits_1);
  init_symbol(&symbols[7u], "dut_digits_2", SYM_MODULE, &INST_dut_digits_2);
  init_symbol(&symbols[8u], "dut_digits_3", SYM_MODULE, &INST_dut_digits_3);
  init_symbol(&symbols[9u], "dut_dr_en", SYM_MODULE, &INST_dut_dr_en);
  init_symbol(&symbols[10u], "dut_sw_en", SYM_MODULE, &INST_dut_sw_en);
  init_symbol(&symbols[11u], "RL_dut_drive_anode", SYM_RULE);
  init_symbol(&symbols[12u], "RL_dut_drive_cathode", SYM_RULE);
  init_symbol(&symbols[13u], "RL_dut_drive_d0", SYM_RULE);
  init_symbol(&symbols[14u], "RL_dut_inc_digit", SYM_RULE);
  init_symbol(&symbols[15u], "RL_dut_inc_switch", SYM_RULE);
  init_symbol(&symbols[16u], "RL_dut_switch_current", SYM_RULE);
  init_symbol(&symbols[17u], "RL_run", SYM_RULE);
}


/* Rule actions */

void MOD_mkTB::RL_dut_inc_switch()
{
  tUInt8 DEF_dut_d_switch_PLUS_1___d5;
  DEF_x__h755 = INST_dut_d_switch.METH_read();
  DEF_dut_d_switch_PLUS_1___d5 = (tUInt8)3u & (DEF_x__h755 + (tUInt8)1u);
  INST_dut_d_switch.METH_write(DEF_dut_d_switch_PLUS_1___d5);
}

void MOD_mkTB::RL_dut_drive_anode()
{
  tUInt8 DEF_dut_d_switch_EQ_0_OR_dut_d_switch_EQ_1_OR_dut__ETC___d12;
  tUInt8 DEF_IF_dut_d_switch_EQ_0_THEN_0b1110_ELSE_IF_dut_d_ETC___d15;
  DEF_x__h755 = INST_dut_d_switch.METH_read();
  switch (DEF_x__h755) {
  case (tUInt8)0u:
    DEF_IF_dut_d_switch_EQ_0_THEN_0b1110_ELSE_IF_dut_d_ETC___d15 = (tUInt8)14u;
    break;
  case (tUInt8)1u:
    DEF_IF_dut_d_switch_EQ_0_THEN_0b1110_ELSE_IF_dut_d_ETC___d15 = (tUInt8)13u;
    break;
  case (tUInt8)2u:
    DEF_IF_dut_d_switch_EQ_0_THEN_0b1110_ELSE_IF_dut_d_ETC___d15 = (tUInt8)11u;
    break;
  default:
    DEF_IF_dut_d_switch_EQ_0_THEN_0b1110_ELSE_IF_dut_d_ETC___d15 = (tUInt8)7u;
  }
  DEF_dut_d_switch_EQ_0_OR_dut_d_switch_EQ_1_OR_dut__ETC___d12 = DEF_x__h755 == (tUInt8)0u || (DEF_x__h755 == (tUInt8)1u || (DEF_x__h755 == (tUInt8)2u || DEF_x__h755 == (tUInt8)3u));
  if (DEF_dut_d_switch_EQ_0_OR_dut_d_switch_EQ_1_OR_dut__ETC___d12)
    INST_dut_anodes.METH_write(DEF_IF_dut_d_switch_EQ_0_THEN_0b1110_ELSE_IF_dut_d_ETC___d15);
}

void MOD_mkTB::RL_dut_switch_current()
{
  tUInt8 DEF_SEL_ARR_dut_digits_0_6_dut_digits_1_7_dut_digi_ETC___d21;
  DEF_b__h896 = INST_dut_digits_3.METH_read();
  DEF_b__h895 = INST_dut_digits_2.METH_read();
  DEF_b__h894 = INST_dut_digits_1.METH_read();
  DEF_b__h893 = INST_dut_digits_0.METH_read();
  DEF_x__h755 = INST_dut_d_switch.METH_read();
  switch (DEF_x__h755) {
  case (tUInt8)0u:
    DEF_SEL_ARR_dut_digits_0_6_dut_digits_1_7_dut_digi_ETC___d21 = DEF_b__h893;
    break;
  case (tUInt8)1u:
    DEF_SEL_ARR_dut_digits_0_6_dut_digits_1_7_dut_digi_ETC___d21 = DEF_b__h894;
    break;
  case (tUInt8)2u:
    DEF_SEL_ARR_dut_digits_0_6_dut_digits_1_7_dut_digi_ETC___d21 = DEF_b__h895;
    break;
  case (tUInt8)3u:
    DEF_SEL_ARR_dut_digits_0_6_dut_digits_1_7_dut_digi_ETC___d21 = DEF_b__h896;
    break;
  default:
    DEF_SEL_ARR_dut_digits_0_6_dut_digits_1_7_dut_digi_ETC___d21 = (tUInt8)10u;
  }
  INST_dut_current_digit.METH_write(DEF_SEL_ARR_dut_digits_0_6_dut_digits_1_7_dut_digi_ETC___d21);
}

void MOD_mkTB::RL_dut_drive_cathode()
{
  tUInt8 DEF_dut_current_digit_2_EQ_0x0_3_OR_dut_current_di_ETC___d53;
  tUInt8 DEF_IF_dut_current_digit_2_EQ_0x0_3_THEN_0b1000000_ETC___d68;
  tUInt8 DEF_b__h908;
  DEF_b__h908 = INST_dut_current_digit.METH_read();
  switch (DEF_b__h908) {
  case (tUInt8)0u:
    DEF_IF_dut_current_digit_2_EQ_0x0_3_THEN_0b1000000_ETC___d68 = (tUInt8)64u;
    break;
  case (tUInt8)1u:
    DEF_IF_dut_current_digit_2_EQ_0x0_3_THEN_0b1000000_ETC___d68 = (tUInt8)121u;
    break;
  case (tUInt8)2u:
    DEF_IF_dut_current_digit_2_EQ_0x0_3_THEN_0b1000000_ETC___d68 = (tUInt8)36u;
    break;
  case (tUInt8)3u:
    DEF_IF_dut_current_digit_2_EQ_0x0_3_THEN_0b1000000_ETC___d68 = (tUInt8)48u;
    break;
  case (tUInt8)4u:
    DEF_IF_dut_current_digit_2_EQ_0x0_3_THEN_0b1000000_ETC___d68 = (tUInt8)25u;
    break;
  case (tUInt8)5u:
    DEF_IF_dut_current_digit_2_EQ_0x0_3_THEN_0b1000000_ETC___d68 = (tUInt8)18u;
    break;
  case (tUInt8)6u:
    DEF_IF_dut_current_digit_2_EQ_0x0_3_THEN_0b1000000_ETC___d68 = (tUInt8)2u;
    break;
  case (tUInt8)7u:
    DEF_IF_dut_current_digit_2_EQ_0x0_3_THEN_0b1000000_ETC___d68 = (tUInt8)120u;
    break;
  case (tUInt8)8u:
    DEF_IF_dut_current_digit_2_EQ_0x0_3_THEN_0b1000000_ETC___d68 = (tUInt8)0u;
    break;
  case (tUInt8)9u:
    DEF_IF_dut_current_digit_2_EQ_0x0_3_THEN_0b1000000_ETC___d68 = (tUInt8)16u;
    break;
  case (tUInt8)10u:
    DEF_IF_dut_current_digit_2_EQ_0x0_3_THEN_0b1000000_ETC___d68 = (tUInt8)8u;
    break;
  case (tUInt8)11u:
    DEF_IF_dut_current_digit_2_EQ_0x0_3_THEN_0b1000000_ETC___d68 = (tUInt8)3u;
    break;
  case (tUInt8)12u:
    DEF_IF_dut_current_digit_2_EQ_0x0_3_THEN_0b1000000_ETC___d68 = (tUInt8)70u;
    break;
  case (tUInt8)13u:
    DEF_IF_dut_current_digit_2_EQ_0x0_3_THEN_0b1000000_ETC___d68 = (tUInt8)33u;
    break;
  case (tUInt8)14u:
    DEF_IF_dut_current_digit_2_EQ_0x0_3_THEN_0b1000000_ETC___d68 = (tUInt8)6u;
    break;
  default:
    DEF_IF_dut_current_digit_2_EQ_0x0_3_THEN_0b1000000_ETC___d68 = (tUInt8)14u;
  }
  DEF_dut_current_digit_2_EQ_0x0_3_OR_dut_current_di_ETC___d53 = DEF_b__h908 == (tUInt8)0u || (DEF_b__h908 == (tUInt8)1u || (DEF_b__h908 == (tUInt8)2u || (DEF_b__h908 == (tUInt8)3u || (DEF_b__h908 == (tUInt8)4u || (DEF_b__h908 == (tUInt8)5u || (DEF_b__h908 == (tUInt8)6u || (DEF_b__h908 == (tUInt8)7u || (DEF_b__h908 == (tUInt8)8u || (DEF_b__h908 == (tUInt8)9u || (DEF_b__h908 == (tUInt8)10u || (DEF_b__h908 == (tUInt8)11u || (DEF_b__h908 == (tUInt8)12u || (DEF_b__h908 == (tUInt8)13u || (DEF_b__h908 == (tUInt8)14u || DEF_b__h908 == (tUInt8)15u))))))))))))));
  if (DEF_dut_current_digit_2_EQ_0x0_3_OR_dut_current_di_ETC___d53)
    INST_dut_cathodes.METH_write(DEF_IF_dut_current_digit_2_EQ_0x0_3_THEN_0b1000000_ETC___d68);
}

void MOD_mkTB::RL_dut_drive_d0()
{
  tUInt8 DEF_dut_digits_0_6_PLUS_1___d72;
  DEF_b__h893 = INST_dut_digits_0.METH_read();
  DEF_dut_digits_0_6_PLUS_1___d72 = (tUInt8)15u & (DEF_b__h893 + (tUInt8)1u);
  INST_dut_digits_0.METH_write(DEF_dut_digits_0_6_PLUS_1___d72);
}

void MOD_mkTB::RL_dut_inc_digit()
{
  tUInt8 DEF_dut_digits_1_7_PLUS_1___d74;
  tUInt8 DEF_dut_digits_2_8_PLUS_1___d76;
  tUInt8 DEF_dut_digits_3_9_PLUS_1___d78;
  tUInt8 DEF_dut_digits_0_6_EQ_0xF___d73;
  tUInt8 DEF_dut_digits_1_7_EQ_0xF___d75;
  tUInt8 DEF_dut_digits_2_8_EQ_0xF___d77;
  DEF_b__h896 = INST_dut_digits_3.METH_read();
  DEF_b__h895 = INST_dut_digits_2.METH_read();
  DEF_b__h894 = INST_dut_digits_1.METH_read();
  DEF_b__h893 = INST_dut_digits_0.METH_read();
  DEF_dut_digits_2_8_EQ_0xF___d77 = DEF_b__h895 == (tUInt8)15u;
  DEF_dut_digits_1_7_EQ_0xF___d75 = DEF_b__h894 == (tUInt8)15u;
  DEF_dut_digits_0_6_EQ_0xF___d73 = DEF_b__h893 == (tUInt8)15u;
  DEF_dut_digits_3_9_PLUS_1___d78 = (tUInt8)15u & (DEF_b__h896 + (tUInt8)1u);
  DEF_dut_digits_2_8_PLUS_1___d76 = (tUInt8)15u & (DEF_b__h895 + (tUInt8)1u);
  DEF_dut_digits_1_7_PLUS_1___d74 = (tUInt8)15u & (DEF_b__h894 + (tUInt8)1u);
  if (DEF_dut_digits_0_6_EQ_0xF___d73)
    INST_dut_digits_1.METH_write(DEF_dut_digits_1_7_PLUS_1___d74);
  if (DEF_dut_digits_1_7_EQ_0xF___d75)
    INST_dut_digits_2.METH_write(DEF_dut_digits_2_8_PLUS_1___d76);
  if (DEF_dut_digits_2_8_EQ_0xF___d77)
    INST_dut_digits_3.METH_write(DEF_dut_digits_3_9_PLUS_1___d78);
}

void MOD_mkTB::RL_run()
{
  tUInt32 DEF_counter_9_PLUS_1___d82;
  tUInt8 DEF_NOT_counter_9_EQ_65536_0___d81;
  tUInt8 DEF_counter_9_EQ_65536___d80;
  tUInt32 DEF_b__h1698;
  DEF_b__h1698 = INST_counter.METH_read();
  DEF_counter_9_EQ_65536___d80 = DEF_b__h1698 == 65536u;
  DEF_NOT_counter_9_EQ_65536_0___d81 = !DEF_counter_9_EQ_65536___d80;
  DEF_counter_9_PLUS_1___d82 = DEF_b__h1698 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_dumpvars(sim_hdl);
  INST_dut_sw_en.METH_wset((tUInt8)1u);
  INST_dut_dr_en.METH_wset((tUInt8)1u);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_counter_9_EQ_65536___d80)
      dollar_finish(sim_hdl, "32", 1u);
  if (DEF_NOT_counter_9_EQ_65536_0___d81)
    INST_counter.METH_write(DEF_counter_9_PLUS_1___d82);
}


/* Methods */


/* Reset routines */

void MOD_mkTB::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_dut_digits_3.reset_RST(ARG_rst_in);
  INST_dut_digits_2.reset_RST(ARG_rst_in);
  INST_dut_digits_1.reset_RST(ARG_rst_in);
  INST_dut_digits_0.reset_RST(ARG_rst_in);
  INST_dut_d_switch.reset_RST(ARG_rst_in);
  INST_dut_current_digit.reset_RST(ARG_rst_in);
  INST_dut_cathodes.reset_RST(ARG_rst_in);
  INST_dut_anodes.reset_RST(ARG_rst_in);
  INST_counter.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTB::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTB::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_counter.dump_state(indent + 2u);
  INST_dut_anodes.dump_state(indent + 2u);
  INST_dut_cathodes.dump_state(indent + 2u);
  INST_dut_current_digit.dump_state(indent + 2u);
  INST_dut_d_switch.dump_state(indent + 2u);
  INST_dut_digits_0.dump_state(indent + 2u);
  INST_dut_digits_1.dump_state(indent + 2u);
  INST_dut_digits_2.dump_state(indent + 2u);
  INST_dut_digits_3.dump_state(indent + 2u);
  INST_dut_dr_en.dump_state(indent + 2u);
  INST_dut_sw_en.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTB::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 17u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h893", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h894", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h895", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h896", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h755", 2u);
  num = INST_counter.dump_VCD_defs(num);
  num = INST_dut_anodes.dump_VCD_defs(num);
  num = INST_dut_cathodes.dump_VCD_defs(num);
  num = INST_dut_current_digit.dump_VCD_defs(num);
  num = INST_dut_d_switch.dump_VCD_defs(num);
  num = INST_dut_digits_0.dump_VCD_defs(num);
  num = INST_dut_digits_1.dump_VCD_defs(num);
  num = INST_dut_digits_2.dump_VCD_defs(num);
  num = INST_dut_digits_3.dump_VCD_defs(num);
  num = INST_dut_dr_en.dump_VCD_defs(num);
  num = INST_dut_sw_en.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTB::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTB &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTB::vcd_defs(tVCDDumpType dt, MOD_mkTB &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 2u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_b__h893) != DEF_b__h893)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h893, 4u);
	backing.DEF_b__h893 = DEF_b__h893;
      }
      ++num;
      if ((backing.DEF_b__h894) != DEF_b__h894)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h894, 4u);
	backing.DEF_b__h894 = DEF_b__h894;
      }
      ++num;
      if ((backing.DEF_b__h895) != DEF_b__h895)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h895, 4u);
	backing.DEF_b__h895 = DEF_b__h895;
      }
      ++num;
      if ((backing.DEF_b__h896) != DEF_b__h896)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h896, 4u);
	backing.DEF_b__h896 = DEF_b__h896;
      }
      ++num;
      if ((backing.DEF_x__h755) != DEF_x__h755)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h755, 2u);
	backing.DEF_x__h755 = DEF_x__h755;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_b__h893, 4u);
      backing.DEF_b__h893 = DEF_b__h893;
      vcd_write_val(sim_hdl, num++, DEF_b__h894, 4u);
      backing.DEF_b__h894 = DEF_b__h894;
      vcd_write_val(sim_hdl, num++, DEF_b__h895, 4u);
      backing.DEF_b__h895 = DEF_b__h895;
      vcd_write_val(sim_hdl, num++, DEF_b__h896, 4u);
      backing.DEF_b__h896 = DEF_b__h896;
      vcd_write_val(sim_hdl, num++, DEF_x__h755, 2u);
      backing.DEF_x__h755 = DEF_x__h755;
    }
}

void MOD_mkTB::vcd_prims(tVCDDumpType dt, MOD_mkTB &backing)
{
  INST_counter.dump_VCD(dt, backing.INST_counter);
  INST_dut_anodes.dump_VCD(dt, backing.INST_dut_anodes);
  INST_dut_cathodes.dump_VCD(dt, backing.INST_dut_cathodes);
  INST_dut_current_digit.dump_VCD(dt, backing.INST_dut_current_digit);
  INST_dut_d_switch.dump_VCD(dt, backing.INST_dut_d_switch);
  INST_dut_digits_0.dump_VCD(dt, backing.INST_dut_digits_0);
  INST_dut_digits_1.dump_VCD(dt, backing.INST_dut_digits_1);
  INST_dut_digits_2.dump_VCD(dt, backing.INST_dut_digits_2);
  INST_dut_digits_3.dump_VCD(dt, backing.INST_dut_digits_3);
  INST_dut_dr_en.dump_VCD(dt, backing.INST_dut_dr_en);
  INST_dut_sw_en.dump_VCD(dt, backing.INST_dut_sw_en);
}
