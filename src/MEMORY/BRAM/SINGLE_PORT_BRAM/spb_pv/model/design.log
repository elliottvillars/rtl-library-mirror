
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 UNKNOWN, clang 9.0.0 -march=x86-64 -mtune=generic -O2 -fno-plt -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: single_port_bram.v
Parsing formal Verilog input from `single_port_bram.v' to AST representation.
Generating RTLIL representation for module `\single_port_bram'.
Successfully finished Verilog frontend.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \single_port_bram

2.1.2. Analyzing design hierarchy..
Top module:  \single_port_bram
Removed 0 unused modules.
Module single_port_bram directly or indirectly contains formal properties -> setting "keep" attribute.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$single_port_bram.v:27$22 in module single_port_bram.
Marked 1 switch rules as full_case in process $proc$single_port_bram.v:13$14 in module single_port_bram.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\single_port_bram.$proc$single_port_bram.v:39$71'.
  Set init value: $formal$single_port_bram.v:39$13_EN = 1'0
Found init rule in `\single_port_bram.$proc$single_port_bram.v:37$69'.
  Set init value: $formal$single_port_bram.v:37$12_EN = 1'0
Found init rule in `\single_port_bram.$proc$single_port_bram.v:35$67'.
  Set init value: $formal$single_port_bram.v:35$11_EN = 1'0
Found init rule in `\single_port_bram.$proc$single_port_bram.v:31$65'.
  Set init value: $formal$single_port_bram.v:31$10_EN = 1'0
Found init rule in `\single_port_bram.$proc$single_port_bram.v:30$63'.
  Set init value: $formal$single_port_bram.v:30$9_EN = 1'0
Found init rule in `\single_port_bram.$proc$single_port_bram.v:26$62'.
  Set init value: \r_PAST_VALID = 1'0
Found init rule in `\single_port_bram.$proc$single_port_bram.v:9$61'.
  Set init value: \o_READ_DATA = 8'00000000

2.2.4. Executing PROC_ARST pass (detect async resets in processes).

2.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\single_port_bram.$proc$single_port_bram.v:39$71'.
     1/1: $0$formal$single_port_bram.v:39$13_EN[0:0]$72
Creating decoders for process `\single_port_bram.$proc$single_port_bram.v:37$69'.
     1/1: $0$formal$single_port_bram.v:37$12_EN[0:0]$70
Creating decoders for process `\single_port_bram.$proc$single_port_bram.v:35$67'.
     1/1: $0$formal$single_port_bram.v:35$11_EN[0:0]$68
Creating decoders for process `\single_port_bram.$proc$single_port_bram.v:31$65'.
     1/1: $0$formal$single_port_bram.v:31$10_EN[0:0]$66
Creating decoders for process `\single_port_bram.$proc$single_port_bram.v:30$63'.
     1/1: $0$formal$single_port_bram.v:30$9_EN[0:0]$64
Creating decoders for process `\single_port_bram.$proc$single_port_bram.v:26$62'.
     1/1: $1\r_PAST_VALID[0:0]
Creating decoders for process `\single_port_bram.$proc$single_port_bram.v:9$61'.
     1/1: $1\o_READ_DATA[7:0]
Creating decoders for process `\single_port_bram.$proc$single_port_bram.v:27$22'.
     1/18: $0$past$single_port_bram.v:37$7$0[3:0]$29
     2/18: $0$past$single_port_bram.v:36$6$0[0:0]$28
     3/18: $0$past$single_port_bram.v:35$5$0[7:0]$27
     4/18: $0$past$single_port_bram.v:35$4$0[3:0]$26
     5/18: $0$past$single_port_bram.v:34$3$0[0:0]$25
     6/18: $0$past$single_port_bram.v:32$2$0[0:0]$24
     7/18: $0$past$single_port_bram.v:30$1$0[0:0]$23
     8/18: $0$formal$single_port_bram.v:31$10_EN[0:0]$33
     9/18: $0$formal$single_port_bram.v:31$10_CHECK[0:0]$32
    10/18: $0$formal$single_port_bram.v:30$9_EN[0:0]$31
    11/18: $0$formal$single_port_bram.v:30$9_CHECK[0:0]$30
    12/18: $0\r_PAST_VALID[0:0]
    13/18: $0$formal$single_port_bram.v:35$11_EN[0:0]$35
    14/18: $0$formal$single_port_bram.v:35$11_CHECK[0:0]$34
    15/18: $0$formal$single_port_bram.v:37$12_EN[0:0]$37
    16/18: $0$formal$single_port_bram.v:37$12_CHECK[0:0]$36
    17/18: $0$formal$single_port_bram.v:39$13_EN[0:0]$39
    18/18: $0$formal$single_port_bram.v:39$13_CHECK[0:0]$38
Creating decoders for process `\single_port_bram.$proc$single_port_bram.v:20$17'.
     1/3: $0$memwr$\r_RAM$single_port_bram.v:22$8_EN[7:0]$20
     2/3: $0$memwr$\r_RAM$single_port_bram.v:22$8_DATA[7:0]$19
     3/3: $0$memwr$\r_RAM$single_port_bram.v:22$8_ADDR[3:0]$18
Creating decoders for process `\single_port_bram.$proc$single_port_bram.v:13$14'.
     1/1: $0\o_READ_DATA[7:0]

2.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\single_port_bram.\r_PAST_VALID' using process `\single_port_bram.$proc$single_port_bram.v:27$22'.
  created $dff cell `$procdff$110' with positive edge clock.
Creating register for signal `\single_port_bram.$past$single_port_bram.v:30$1$0' using process `\single_port_bram.$proc$single_port_bram.v:27$22'.
  created $dff cell `$procdff$111' with positive edge clock.
Creating register for signal `\single_port_bram.$past$single_port_bram.v:32$2$0' using process `\single_port_bram.$proc$single_port_bram.v:27$22'.
  created $dff cell `$procdff$112' with positive edge clock.
Creating register for signal `\single_port_bram.$past$single_port_bram.v:34$3$0' using process `\single_port_bram.$proc$single_port_bram.v:27$22'.
  created $dff cell `$procdff$113' with positive edge clock.
Creating register for signal `\single_port_bram.$past$single_port_bram.v:35$4$0' using process `\single_port_bram.$proc$single_port_bram.v:27$22'.
  created $dff cell `$procdff$114' with positive edge clock.
Creating register for signal `\single_port_bram.$past$single_port_bram.v:35$5$0' using process `\single_port_bram.$proc$single_port_bram.v:27$22'.
  created $dff cell `$procdff$115' with positive edge clock.
Creating register for signal `\single_port_bram.$past$single_port_bram.v:36$6$0' using process `\single_port_bram.$proc$single_port_bram.v:27$22'.
  created $dff cell `$procdff$116' with positive edge clock.
Creating register for signal `\single_port_bram.$past$single_port_bram.v:37$7$0' using process `\single_port_bram.$proc$single_port_bram.v:27$22'.
  created $dff cell `$procdff$117' with positive edge clock.
Creating register for signal `\single_port_bram.$formal$single_port_bram.v:30$9_CHECK' using process `\single_port_bram.$proc$single_port_bram.v:27$22'.
  created $dff cell `$procdff$118' with positive edge clock.
Creating register for signal `\single_port_bram.$formal$single_port_bram.v:30$9_EN' using process `\single_port_bram.$proc$single_port_bram.v:27$22'.
  created $dff cell `$procdff$119' with positive edge clock.
Creating register for signal `\single_port_bram.$formal$single_port_bram.v:31$10_CHECK' using process `\single_port_bram.$proc$single_port_bram.v:27$22'.
  created $dff cell `$procdff$120' with positive edge clock.
Creating register for signal `\single_port_bram.$formal$single_port_bram.v:31$10_EN' using process `\single_port_bram.$proc$single_port_bram.v:27$22'.
  created $dff cell `$procdff$121' with positive edge clock.
Creating register for signal `\single_port_bram.$formal$single_port_bram.v:35$11_CHECK' using process `\single_port_bram.$proc$single_port_bram.v:27$22'.
  created $dff cell `$procdff$122' with positive edge clock.
Creating register for signal `\single_port_bram.$formal$single_port_bram.v:35$11_EN' using process `\single_port_bram.$proc$single_port_bram.v:27$22'.
  created $dff cell `$procdff$123' with positive edge clock.
Creating register for signal `\single_port_bram.$formal$single_port_bram.v:37$12_CHECK' using process `\single_port_bram.$proc$single_port_bram.v:27$22'.
  created $dff cell `$procdff$124' with positive edge clock.
Creating register for signal `\single_port_bram.$formal$single_port_bram.v:37$12_EN' using process `\single_port_bram.$proc$single_port_bram.v:27$22'.
  created $dff cell `$procdff$125' with positive edge clock.
Creating register for signal `\single_port_bram.$formal$single_port_bram.v:39$13_CHECK' using process `\single_port_bram.$proc$single_port_bram.v:27$22'.
  created $dff cell `$procdff$126' with positive edge clock.
Creating register for signal `\single_port_bram.$formal$single_port_bram.v:39$13_EN' using process `\single_port_bram.$proc$single_port_bram.v:27$22'.
  created $dff cell `$procdff$127' with positive edge clock.
Creating register for signal `\single_port_bram.$memwr$\r_RAM$single_port_bram.v:22$8_ADDR' using process `\single_port_bram.$proc$single_port_bram.v:20$17'.
  created $dff cell `$procdff$128' with positive edge clock.
Creating register for signal `\single_port_bram.$memwr$\r_RAM$single_port_bram.v:22$8_DATA' using process `\single_port_bram.$proc$single_port_bram.v:20$17'.
  created $dff cell `$procdff$129' with positive edge clock.
Creating register for signal `\single_port_bram.$memwr$\r_RAM$single_port_bram.v:22$8_EN' using process `\single_port_bram.$proc$single_port_bram.v:20$17'.
  created $dff cell `$procdff$130' with positive edge clock.
Creating register for signal `\single_port_bram.\o_READ_DATA' using process `\single_port_bram.$proc$single_port_bram.v:13$14'.
  created $dff cell `$procdff$131' with positive edge clock.

2.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `single_port_bram.$proc$single_port_bram.v:39$71'.
Removing empty process `single_port_bram.$proc$single_port_bram.v:37$69'.
Removing empty process `single_port_bram.$proc$single_port_bram.v:35$67'.
Removing empty process `single_port_bram.$proc$single_port_bram.v:31$65'.
Removing empty process `single_port_bram.$proc$single_port_bram.v:30$63'.
Removing empty process `single_port_bram.$proc$single_port_bram.v:26$62'.
Removing empty process `single_port_bram.$proc$single_port_bram.v:9$61'.
Found and cleaned up 3 empty switches in `\single_port_bram.$proc$single_port_bram.v:27$22'.
Removing empty process `single_port_bram.$proc$single_port_bram.v:27$22'.
Found and cleaned up 1 empty switch in `\single_port_bram.$proc$single_port_bram.v:20$17'.
Removing empty process `single_port_bram.$proc$single_port_bram.v:20$17'.
Found and cleaned up 1 empty switch in `\single_port_bram.$proc$single_port_bram.v:13$14'.
Removing empty process `single_port_bram.$proc$single_port_bram.v:13$14'.
Cleaned up 5 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module single_port_bram.
<suppressed ~6 debug messages>

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \single_port_bram..
Removed 0 unused cells and 50 unused wires.
<suppressed ~1 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module single_port_bram..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module single_port_bram.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\single_port_bram'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \single_port_bram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \single_port_bram.
    Consolidated identical input bits for $mux cell $procmux$101:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\r_RAM$single_port_bram.v:22$8_EN[7:0]$20
      New ports: A=1'0, B=1'1, Y=$0$memwr$\r_RAM$single_port_bram.v:22$8_EN[7:0]$20 [0]
      New connections: $0$memwr$\r_RAM$single_port_bram.v:22$8_EN[7:0]$20 [7:1] = { $0$memwr$\r_RAM$single_port_bram.v:22$8_EN[7:0]$20 [0] $0$memwr$\r_RAM$single_port_bram.v:22$8_EN[7:0]$20 [0] $0$memwr$\r_RAM$single_port_bram.v:22$8_EN[7:0]$20 [0] $0$memwr$\r_RAM$single_port_bram.v:22$8_EN[7:0]$20 [0] $0$memwr$\r_RAM$single_port_bram.v:22$8_EN[7:0]$20 [0] $0$memwr$\r_RAM$single_port_bram.v:22$8_EN[7:0]$20 [0] $0$memwr$\r_RAM$single_port_bram.v:22$8_EN[7:0]$20 [0] }
  Optimizing cells in module \single_port_bram.
Performed a total of 1 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\single_port_bram'.
Removed a total of 0 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \single_port_bram..
Removed 0 unused cells and 3 unused wires.
<suppressed ~4 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module single_port_bram.

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \single_port_bram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \single_port_bram.
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\single_port_bram'.
Removed a total of 0 cells.

2.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \single_port_bram..

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module single_port_bram.

2.6.16. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell single_port_bram.$and$single_port_bram.v:32$43 ($and).
Removed top 31 bits (of 32) from port Y of cell single_port_bram.$and$single_port_bram.v:32$43 ($and).
Removed top 31 bits (of 32) from port B of cell single_port_bram.$and$single_port_bram.v:32$45 ($and).
Removed top 31 bits (of 32) from port Y of cell single_port_bram.$and$single_port_bram.v:32$45 ($and).
Removed top 7 bits (of 8) from FF cell single_port_bram.$procdff$130 ($dff).
Removed top 31 bits (of 32) from wire single_port_bram.$and$single_port_bram.v:32$43_Y.
Removed top 31 bits (of 32) from wire single_port_bram.$and$single_port_bram.v:32$45_Y.

2.8. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$memwr$\r_RAM$single_port_bram.v:22$55' in module `\single_port_bram': merged $dff to cell.

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \single_port_bram..
Removed 3 unused cells and 5 unused wires.
<suppressed ~4 debug messages>

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\r_RAM' in module `\single_port_bram':
  $memwr$\r_RAM$single_port_bram.v:22$55 ($memwr)
  $memrd$\r_RAM$single_port_bram.v:15$16 ($memrd)
  $memrd$\r_RAM$single_port_bram.v:35$49 ($memrd)
  $memrd$\r_RAM$single_port_bram.v:37$52 ($memrd)

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module single_port_bram.
<suppressed ~2 debug messages>

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\single_port_bram'.
Removed a total of 0 cells.

2.11.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \single_port_bram..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.11.5. Finished fast OPT passes.

2.12. Printing statistics.

=== single_port_bram ===

   Number of wires:                 49
   Number of wire bits:            127
   Number of public wires:           8
   Number of public wire bits:      28
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 46
     $assert                         3
     $assume                         2
     $dff                           16
     $eq                             2
     $logic_and                      2
     $logic_not                      2
     $mem                            1
     $mux                           16
     $ne                             2

2.13. Executing CHECK pass (checking for obvious problems).
checking module single_port_bram..
found and reported 0 problems.

3. Executing MEMORY_NORDFF pass (extracting $dff cells from $mem).

4. Executing ASYNC2SYNC pass.

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \single_port_bram..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

6. Executing SETUNDEF pass (replace undef values with defined constants).

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module single_port_bram.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\single_port_bram'.
Removed a total of 0 cells.

7.3. Executing OPT_RMDFF pass (remove dff with constant values).

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \single_port_bram..

7.5. Finished fast OPT passes.

8. Executing CHECK pass (checking for obvious problems).
checking module single_port_bram..
found and reported 0 problems.

9. Executing HIERARCHY pass (managing design hierarchy).

9.1. Analyzing design hierarchy..
Top module:  \single_port_bram

9.2. Analyzing design hierarchy..
Top module:  \single_port_bram
Removed 0 unused modules.
Module single_port_bram directly or indirectly contains formal properties -> setting "keep" attribute.

10. Executing ILANG backend.
Output filename: ../model/design.il

End of script. Logfile hash: 948d6d073a
CPU: user 0.04s system 0.00s, MEM: 17.95 MB total, 9.08 MB resident
Yosys 0.9 (git sha1 UNKNOWN, clang 9.0.0 -march=x86-64 -mtune=generic -O2 -fno-plt -fPIC -Os)
Time spent: 29% 7x opt_clean (0 sec), 14% 6x opt_expr (0 sec), ...
