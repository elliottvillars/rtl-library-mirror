
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 UNKNOWN, clang 9.0.0 -march=x86-64 -mtune=generic -O2 -fno-plt -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: dynamic_clock_divider.v
Parsing formal Verilog input from `dynamic_clock_divider.v' to AST representation.
Generating RTLIL representation for module `\dynamic_clock_divider'.
Successfully finished Verilog frontend.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \dynamic_clock_divider

2.1.2. Analyzing design hierarchy..
Top module:  \dynamic_clock_divider
Removed 0 unused modules.
Module dynamic_clock_divider directly or indirectly contains formal properties -> setting "keep" attribute.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$dynamic_clock_divider.v:82$30 in module dynamic_clock_divider.
Marked 2 switch rules as full_case in process $proc$dynamic_clock_divider.v:55$25 in module dynamic_clock_divider.
Marked 3 switch rules as full_case in process $proc$dynamic_clock_divider.v:33$20 in module dynamic_clock_divider.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:100$90'.
  Set init value: $formal$dynamic_clock_divider.v:100$19_EN = 1'0
Found init rule in `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:91$88'.
  Set init value: $formal$dynamic_clock_divider.v:91$18_EN = 1'0
Found init rule in `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:90$86'.
  Set init value: $formal$dynamic_clock_divider.v:90$17_EN = 1'0
Found init rule in `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:85$84'.
  Set init value: $formal$dynamic_clock_divider.v:85$16_EN = 1'0

2.2.4. Executing PROC_ARST pass (detect async resets in processes).

2.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:100$90'.
     1/1: $0$formal$dynamic_clock_divider.v:100$19_EN[0:0]$91
Creating decoders for process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:91$88'.
     1/1: $0$formal$dynamic_clock_divider.v:91$18_EN[0:0]$89
Creating decoders for process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:90$86'.
     1/1: $0$formal$dynamic_clock_divider.v:90$17_EN[0:0]$87
Creating decoders for process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:85$84'.
     1/1: $0$formal$dynamic_clock_divider.v:85$16_EN[0:0]$85
Creating decoders for process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:76$74'.
     1/6: $0$formal$dynamic_clock_divider.v:79$14_EN[0:0]$80
     2/6: $0$formal$dynamic_clock_divider.v:79$14_CHECK[0:0]$79
     3/6: $0$formal$dynamic_clock_divider.v:78$12_EN[0:0]$78
     4/6: $0$formal$dynamic_clock_divider.v:78$12_CHECK[0:0]$77
     5/6: $0$formal$dynamic_clock_divider.v:77$10_EN[0:0]$76
     6/6: $0$formal$dynamic_clock_divider.v:77$10_CHECK[0:0]$75
Creating decoders for process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:82$30'.
     1/18: $0$past$dynamic_clock_divider.v:100$9$0[31:0]$39
     2/18: $0$past$dynamic_clock_divider.v:99$8$0[31:0]$38
     3/18: $0$past$dynamic_clock_divider.v:97$7$0[0:0]$37
     4/18: $0$past$dynamic_clock_divider.v:97$6$0[0:0]$36
     5/18: $0$past$dynamic_clock_divider.v:95$5$0[0:0]$35
     6/18: $0$past$dynamic_clock_divider.v:95$4$0[0:0]$34
     7/18: $0$past$dynamic_clock_divider.v:88$3$0[0:0]$33
     8/18: $0$past$dynamic_clock_divider.v:86$2$0[0:0]$32
     9/18: $0$past$dynamic_clock_divider.v:85$1$0[0:0]$31
    10/18: $0$formal$dynamic_clock_divider.v:85$16_EN[0:0]$41
    11/18: $0$formal$dynamic_clock_divider.v:85$16_CHECK[0:0]$40
    12/18: $0\r_PAST_VALID[0:0]
    13/18: $0$formal$dynamic_clock_divider.v:90$17_EN[0:0]$43
    14/18: $0$formal$dynamic_clock_divider.v:90$17_CHECK[0:0]$42
    15/18: $0$formal$dynamic_clock_divider.v:91$18_EN[0:0]$45
    16/18: $0$formal$dynamic_clock_divider.v:91$18_CHECK[0:0]$44
    17/18: $0$formal$dynamic_clock_divider.v:100$19_EN[0:0]$47
    18/18: $0$formal$dynamic_clock_divider.v:100$19_CHECK[0:0]$46
Creating decoders for process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:55$25'.
     1/1: $0\o_ENABLE_OUT[0:0]
Creating decoders for process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:33$20'.
     1/1: $0\r_Count[31:0]

2.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\dynamic_clock_divider.$formal$dynamic_clock_divider.v:77$10_CHECK' from process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:76$74'.
No latch inferred for signal `\dynamic_clock_divider.$formal$dynamic_clock_divider.v:77$10_EN' from process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:76$74'.
No latch inferred for signal `\dynamic_clock_divider.$formal$dynamic_clock_divider.v:78$12_CHECK' from process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:76$74'.
No latch inferred for signal `\dynamic_clock_divider.$formal$dynamic_clock_divider.v:78$12_EN' from process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:76$74'.
No latch inferred for signal `\dynamic_clock_divider.$formal$dynamic_clock_divider.v:79$14_CHECK' from process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:76$74'.
No latch inferred for signal `\dynamic_clock_divider.$formal$dynamic_clock_divider.v:79$14_EN' from process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:76$74'.

2.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\dynamic_clock_divider.\r_PAST_VALID' using process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:82$30'.
  created $dff cell `$procdff$149' with positive edge clock.
Creating register for signal `\dynamic_clock_divider.$past$dynamic_clock_divider.v:85$1$0' using process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:82$30'.
  created $dff cell `$procdff$150' with positive edge clock.
Creating register for signal `\dynamic_clock_divider.$past$dynamic_clock_divider.v:86$2$0' using process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:82$30'.
  created $dff cell `$procdff$151' with positive edge clock.
Creating register for signal `\dynamic_clock_divider.$past$dynamic_clock_divider.v:88$3$0' using process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:82$30'.
  created $dff cell `$procdff$152' with positive edge clock.
Creating register for signal `\dynamic_clock_divider.$past$dynamic_clock_divider.v:95$4$0' using process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:82$30'.
  created $dff cell `$procdff$153' with positive edge clock.
Creating register for signal `\dynamic_clock_divider.$past$dynamic_clock_divider.v:95$5$0' using process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:82$30'.
  created $dff cell `$procdff$154' with positive edge clock.
Creating register for signal `\dynamic_clock_divider.$past$dynamic_clock_divider.v:97$6$0' using process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:82$30'.
  created $dff cell `$procdff$155' with positive edge clock.
Creating register for signal `\dynamic_clock_divider.$past$dynamic_clock_divider.v:97$7$0' using process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:82$30'.
  created $dff cell `$procdff$156' with positive edge clock.
Creating register for signal `\dynamic_clock_divider.$past$dynamic_clock_divider.v:99$8$0' using process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:82$30'.
  created $dff cell `$procdff$157' with positive edge clock.
Creating register for signal `\dynamic_clock_divider.$past$dynamic_clock_divider.v:100$9$0' using process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:82$30'.
  created $dff cell `$procdff$158' with positive edge clock.
Creating register for signal `\dynamic_clock_divider.$formal$dynamic_clock_divider.v:85$16_CHECK' using process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:82$30'.
  created $dff cell `$procdff$159' with positive edge clock.
Creating register for signal `\dynamic_clock_divider.$formal$dynamic_clock_divider.v:85$16_EN' using process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:82$30'.
  created $dff cell `$procdff$160' with positive edge clock.
Creating register for signal `\dynamic_clock_divider.$formal$dynamic_clock_divider.v:90$17_CHECK' using process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:82$30'.
  created $dff cell `$procdff$161' with positive edge clock.
Creating register for signal `\dynamic_clock_divider.$formal$dynamic_clock_divider.v:90$17_EN' using process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:82$30'.
  created $dff cell `$procdff$162' with positive edge clock.
Creating register for signal `\dynamic_clock_divider.$formal$dynamic_clock_divider.v:91$18_CHECK' using process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:82$30'.
  created $dff cell `$procdff$163' with positive edge clock.
Creating register for signal `\dynamic_clock_divider.$formal$dynamic_clock_divider.v:91$18_EN' using process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:82$30'.
  created $dff cell `$procdff$164' with positive edge clock.
Creating register for signal `\dynamic_clock_divider.$formal$dynamic_clock_divider.v:100$19_CHECK' using process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:82$30'.
  created $dff cell `$procdff$165' with positive edge clock.
Creating register for signal `\dynamic_clock_divider.$formal$dynamic_clock_divider.v:100$19_EN' using process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:82$30'.
  created $dff cell `$procdff$166' with positive edge clock.
Creating register for signal `\dynamic_clock_divider.\o_ENABLE_OUT' using process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:55$25'.
  created $dff cell `$procdff$167' with positive edge clock.
Creating register for signal `\dynamic_clock_divider.\r_Count' using process `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:33$20'.
  created $dff cell `$procdff$168' with positive edge clock.

2.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `dynamic_clock_divider.$proc$dynamic_clock_divider.v:100$90'.
Removing empty process `dynamic_clock_divider.$proc$dynamic_clock_divider.v:91$88'.
Removing empty process `dynamic_clock_divider.$proc$dynamic_clock_divider.v:90$86'.
Removing empty process `dynamic_clock_divider.$proc$dynamic_clock_divider.v:85$84'.
Removing empty process `dynamic_clock_divider.$proc$dynamic_clock_divider.v:76$74'.
Found and cleaned up 5 empty switches in `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:82$30'.
Removing empty process `dynamic_clock_divider.$proc$dynamic_clock_divider.v:82$30'.
Found and cleaned up 2 empty switches in `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:55$25'.
Removing empty process `dynamic_clock_divider.$proc$dynamic_clock_divider.v:55$25'.
Found and cleaned up 3 empty switches in `\dynamic_clock_divider.$proc$dynamic_clock_divider.v:33$20'.
Removing empty process `dynamic_clock_divider.$proc$dynamic_clock_divider.v:33$20'.
Cleaned up 10 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module dynamic_clock_divider.
<suppressed ~14 debug messages>

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dynamic_clock_divider..
Removed 1 unused cells and 69 unused wires.
<suppressed ~3 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module dynamic_clock_divider..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dynamic_clock_divider.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dynamic_clock_divider'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dynamic_clock_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dynamic_clock_divider.
Performed a total of 0 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dynamic_clock_divider'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dynamic_clock_divider..
Removed 0 unused cells and 11 unused wires.
<suppressed ~3 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dynamic_clock_divider.

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dynamic_clock_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dynamic_clock_divider.
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dynamic_clock_divider'.
Removed a total of 0 cells.

2.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dynamic_clock_divider..

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dynamic_clock_divider.

2.6.16. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell dynamic_clock_divider.$add$dynamic_clock_divider.v:46$24 ($add).
Removed top 31 bits (of 32) from port B of cell dynamic_clock_divider.$and$dynamic_clock_divider.v:86$50 ($and).
Removed top 31 bits (of 32) from port Y of cell dynamic_clock_divider.$and$dynamic_clock_divider.v:86$50 ($and).
Removed top 31 bits (of 32) from port B of cell dynamic_clock_divider.$and$dynamic_clock_divider.v:86$52 ($and).
Removed top 31 bits (of 32) from port Y of cell dynamic_clock_divider.$and$dynamic_clock_divider.v:86$52 ($and).
Removed top 31 bits (of 32) from port B of cell dynamic_clock_divider.$add$dynamic_clock_divider.v:100$65 ($add).
Removed top 31 bits (of 32) from wire dynamic_clock_divider.$and$dynamic_clock_divider.v:86$50_Y.
Removed top 31 bits (of 32) from wire dynamic_clock_divider.$and$dynamic_clock_divider.v:86$52_Y.

2.8. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dynamic_clock_divider..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dynamic_clock_divider.
<suppressed ~2 debug messages>

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dynamic_clock_divider'.
Removed a total of 0 cells.

2.11.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dynamic_clock_divider..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.11.5. Finished fast OPT passes.

2.12. Printing statistics.

=== dynamic_clock_divider ===

   Number of wires:                 57
   Number of wire bits:            305
   Number of public wires:           6
   Number of public wire bits:      68
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 60
     $add                            2
     $assert                         3
     $assume                         4
     $dff                           13
     $eq                             4
     $ge                             1
     $initstate                      1
     $logic_and                      4
     $logic_not                      2
     $mux                           21
     $ne                             2
     $not                            3

2.13. Executing CHECK pass (checking for obvious problems).
checking module dynamic_clock_divider..
found and reported 0 problems.

3. Executing MEMORY_NORDFF pass (extracting $dff cells from $mem).

4. Executing ASYNC2SYNC pass.

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dynamic_clock_divider..
Removed 2 unused cells and 1 unused wires.
<suppressed ~3 debug messages>

6. Executing SETUNDEF pass (replace undef values with defined constants).

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dynamic_clock_divider.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dynamic_clock_divider'.
Removed a total of 0 cells.

7.3. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec $formal$dynamic_clock_divider.v:85$16_EN = 1'0 to constant driver in module dynamic_clock_divider.
Promoted 1 init specs to constant drivers.

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dynamic_clock_divider..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

7.5. Rerunning OPT passes. (Removed registers in this run.)

7.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module dynamic_clock_divider.

7.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dynamic_clock_divider'.
Removed a total of 0 cells.

7.8. Executing OPT_RMDFF pass (remove dff with constant values).

7.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dynamic_clock_divider..

7.10. Finished fast OPT passes.

8. Executing CHECK pass (checking for obvious problems).
checking module dynamic_clock_divider..
found and reported 0 problems.

9. Executing HIERARCHY pass (managing design hierarchy).

9.1. Analyzing design hierarchy..
Top module:  \dynamic_clock_divider

9.2. Analyzing design hierarchy..
Top module:  \dynamic_clock_divider
Removed 0 unused modules.
Module dynamic_clock_divider directly or indirectly contains formal properties -> setting "keep" attribute.

10. Executing ILANG backend.
Output filename: ../model/design.il

End of script. Logfile hash: f4cb2b096a
CPU: user 0.11s system 0.00s, MEM: 18.16 MB total, 9.03 MB resident
Yosys 0.9 (git sha1 UNKNOWN, clang 9.0.0 -march=x86-64 -mtune=generic -O2 -fno-plt -fPIC -Os)
Time spent: 31% 8x opt_clean (0 sec), 16% 7x opt_expr (0 sec), ...
