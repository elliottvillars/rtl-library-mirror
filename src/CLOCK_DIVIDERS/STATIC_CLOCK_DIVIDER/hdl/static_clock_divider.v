//
// Generated by Bluespec Compiler (build 0000000)
//
// On Mon Nov 23 15:47:43 PST 2020
//
//
// Ports:
// Name                         I/O  size props
// o_ENOUT                        O     1 reg
// i_CLK                          I     1 clock
// i_RESET_N                      I     1 reset
// i_EN                           I     1
//
// No combinational paths from inputs to outputs
//
//
// A static clock divider that generates an enable pulse every N clock cycles
// NOTE: Do not forget to set the dival parameter, it defaults to zero
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module static_clock_divider(i_CLK,
			    i_RESET_N,

			    i_EN,
			    o_ENOUT);
  parameter [31 : 0] dival = 32'b0;
  input  i_CLK;
  input  i_RESET_N;

  // actionvalue method start
  input  i_EN;
  output o_ENOUT;

  // signals for module outputs
  wire o_ENOUT;

  // register counter
  reg [31 : 0] counter;
  wire [31 : 0] counter$D_IN;
  wire counter$EN;

  // register en_OUT
  reg en_OUT;
  wire en_OUT$D_IN, en_OUT$EN;

  // actionvalue method start
  assign o_ENOUT = en_OUT ;

  // register counter
  assign counter$D_IN = (counter == dival - 32'd1) ? 32'd0 : counter + 32'd1 ;
  assign counter$EN = i_EN ;

  // register en_OUT
  assign en_OUT$D_IN = counter == dival - 32'd1 ;
  assign en_OUT$EN = i_EN ;

  // handling of inlined registers

  always@(posedge i_CLK)
  begin
    if (i_RESET_N == `BSV_RESET_VALUE)
      begin
        counter <= `BSV_ASSIGNMENT_DELAY 32'd0;
	en_OUT <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (counter$EN) counter <= `BSV_ASSIGNMENT_DELAY counter$D_IN;
	if (en_OUT$EN) en_OUT <= `BSV_ASSIGNMENT_DELAY en_OUT$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    counter = 32'hAAAAAAAA;
    en_OUT = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // static_clock_divider

