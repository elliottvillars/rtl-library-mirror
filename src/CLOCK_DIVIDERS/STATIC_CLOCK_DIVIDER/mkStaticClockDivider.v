//
// Generated by Bluespec Compiler (build 0000000)
//
// On Mon Nov 23 16:04:57 PST 2020
//
//
// Ports:
// Name                         I/O  size props
// o_ENOUT                        O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// i_EN                           I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkStaticClockDivider(CLK,
			    RST_N,

			    i_EN,
			    o_ENOUT);
  input  CLK;
  input  RST_N;

  // actionvalue method start
  input  i_EN;
  output o_ENOUT;

  // signals for module outputs
  wire o_ENOUT;

  // register cntr_counter
  reg [31 : 0] cntr_counter;
  wire [31 : 0] cntr_counter$D_IN;
  wire cntr_counter$EN;

  // register cntr_en_OUT
  reg cntr_en_OUT;
  wire cntr_en_OUT$D_IN, cntr_en_OUT$EN;

  // actionvalue method start
  assign o_ENOUT = cntr_en_OUT ;

  // register cntr_counter
  assign cntr_counter$D_IN =
	     (cntr_counter == 32'd999) ? 32'd0 : cntr_counter + 32'd1 ;
  assign cntr_counter$EN = i_EN ;

  // register cntr_en_OUT
  assign cntr_en_OUT$D_IN = cntr_counter == 32'd999 ;
  assign cntr_en_OUT$EN = i_EN ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cntr_counter <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cntr_en_OUT <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cntr_counter$EN)
	  cntr_counter <= `BSV_ASSIGNMENT_DELAY cntr_counter$D_IN;
	if (cntr_en_OUT$EN)
	  cntr_en_OUT <= `BSV_ASSIGNMENT_DELAY cntr_en_OUT$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cntr_counter = 32'hAAAAAAAA;
    cntr_en_OUT = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkStaticClockDivider

