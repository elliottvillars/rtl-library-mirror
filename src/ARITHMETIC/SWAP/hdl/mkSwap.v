//
// Generated by Bluespec Compiler (build 0000000)
//
// On Mon Nov 23 15:21:38 PST 2020
//
//
// Ports:
// Name                         I/O  size props
// o_A                            O    32 reg
// o_B                            O    32 reg
// i_CLK                          I     1 clock
// i_A                            I    32
// i_B                            I    32
//
// No combinational paths from inputs to outputs
//
//
// Author: Elliott Villars
// Date: 11/23/2020
// Description: A conditional swap module. Swaps "i_A" and "i_B" if "i_A" is less than "i_B". Registered
// Ports:
// i_CLK: A 1-bit clock port
// i_A: A n-bit wide registered input
// i_B: A n-bit wide registered input
// o_A: A n-bit wide registered output. The larger of the two input numbers is driven here.
// o_B: A n-bit wide registered output. The smaller of the two input numbers is driven here.
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSwap(i_CLK,

	      i_A,
	      i_B,

	      o_A,

	      o_B);
  input  i_CLK;

  // action method put
  input  [31 : 0] i_A;
  input  [31 : 0] i_B;

  // value method getA
  output [31 : 0] o_A;

  // value method getB
  output [31 : 0] o_B;

  // signals for module outputs
  wire [31 : 0] o_A, o_B;

  // register entity1_w_A
  reg [31 : 0] entity1_w_A;
  wire [31 : 0] entity1_w_A$D_IN;
  wire entity1_w_A$EN;

  // register entity1_w_B
  reg [31 : 0] entity1_w_B;
  wire [31 : 0] entity1_w_B$D_IN;
  wire entity1_w_B$EN;

  // remaining internal signals
  wire i_A_SLT_i_B___d1;

  // value method getA
  assign o_A = entity1_w_A ;

  // value method getB
  assign o_B = entity1_w_B ;

  // register entity1_w_A
  assign entity1_w_A$D_IN = i_A_SLT_i_B___d1 ? i_B : i_A ;
  assign entity1_w_A$EN = 1'd1 ;

  // register entity1_w_B
  assign entity1_w_B$D_IN = i_A_SLT_i_B___d1 ? i_A : i_B ;
  assign entity1_w_B$EN = 1'd1 ;

  // remaining internal signals
  assign i_A_SLT_i_B___d1 = (i_A ^ 32'h80000000) < (i_B ^ 32'h80000000) ;

  // handling of inlined registers

  always@(posedge i_CLK)
  begin
    if (entity1_w_A$EN) entity1_w_A <= `BSV_ASSIGNMENT_DELAY entity1_w_A$D_IN;
    if (entity1_w_B$EN) entity1_w_B <= `BSV_ASSIGNMENT_DELAY entity1_w_B$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    entity1_w_A = 32'hAAAAAAAA;
    entity1_w_B = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkSwap

