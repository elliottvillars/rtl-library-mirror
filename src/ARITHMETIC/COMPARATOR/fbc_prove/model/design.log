
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3627 (git sha1 06347b119b, g++ 9.3.0 -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: ./look_ahead_logic_cell.v
Parsing formal SystemVerilog input from `./look_ahead_logic_cell.v' to AST representation.
Storing AST representation for module `$abstract\look_ahead_logic_cell'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: ./four_bit_comparator.v
Parsing formal SystemVerilog input from `./four_bit_comparator.v' to AST representation.
Storing AST representation for module `$abstract\four_bit_comparator'.
Successfully finished Verilog frontend.

3. Executing PREP pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.2. Executing AST frontend in derive mode using pre-parsed AST for module `\four_bit_comparator'.
Generating RTLIL representation for module `\four_bit_comparator'.

3.2.1. Analyzing design hierarchy..
Top module:  \four_bit_comparator

3.2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\look_ahead_logic_cell'.
Generating RTLIL representation for module `\look_ahead_logic_cell'.

3.2.3. Analyzing design hierarchy..
Top module:  \four_bit_comparator
Used module:     \look_ahead_logic_cell

3.2.4. Analyzing design hierarchy..
Top module:  \four_bit_comparator
Used module:     \look_ahead_logic_cell
Removing unused module `$abstract\four_bit_comparator'.
Removing unused module `$abstract\look_ahead_logic_cell'.
Removed 2 unused modules.
Module look_ahead_logic_cell directly or indirectly contains formal properties -> setting "keep" attribute.
Module four_bit_comparator directly or indirectly contains formal properties -> setting "keep" attribute.

3.3. Executing PROC pass (convert processes to netlists).

3.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 4 switch rules as full_case in process $proc$./look_ahead_logic_cell.v:25$96 in module look_ahead_logic_cell.
Marked 2 switch rules as full_case in process $proc$./four_bit_comparator.v:37$39 in module four_bit_comparator.
Removed a total of 0 dead cases.

3.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 6 assignments to connections.

3.3.4. Executing PROC_INIT pass (extract init attributes).

3.3.5. Executing PROC_ARST pass (detect async resets in processes).

3.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\look_ahead_logic_cell.$proc$./look_ahead_logic_cell.v:25$96'.
     1/16: $0$formal$./look_ahead_logic_cell.v:27$72_EN[0:0]$98
     2/16: $0$formal$./look_ahead_logic_cell.v:27$72_CHECK[0:0]$97
     3/16: $0$formal$./look_ahead_logic_cell.v:29$73_EN[0:0]$100
     4/16: $0$formal$./look_ahead_logic_cell.v:29$73_CHECK[0:0]$99
     5/16: $0$formal$./look_ahead_logic_cell.v:31$74_EN[0:0]$102
     6/16: $0$formal$./look_ahead_logic_cell.v:31$74_CHECK[0:0]$101
     7/16: $0$formal$./look_ahead_logic_cell.v:33$75_EN[0:0]$104
     8/16: $0$formal$./look_ahead_logic_cell.v:33$75_CHECK[0:0]$103
     9/16: $0$formal$./look_ahead_logic_cell.v:35$76_EN[0:0]$106
    10/16: $0$formal$./look_ahead_logic_cell.v:35$76_CHECK[0:0]$105
    11/16: $0$formal$./look_ahead_logic_cell.v:37$77_EN[0:0]$108
    12/16: $0$formal$./look_ahead_logic_cell.v:37$77_CHECK[0:0]$107
    13/16: $0$formal$./look_ahead_logic_cell.v:40$78_EN[0:0]$110
    14/16: $0$formal$./look_ahead_logic_cell.v:40$78_CHECK[0:0]$109
    15/16: $0$formal$./look_ahead_logic_cell.v:42$79_EN[0:0]$112
    16/16: $0$formal$./look_ahead_logic_cell.v:42$79_CHECK[0:0]$111
Creating decoders for process `\four_bit_comparator.$proc$./four_bit_comparator.v:37$39'.
     1/6: $0$formal$./four_bit_comparator.v:42$4_EN[0:0]$47
     2/6: $0$formal$./four_bit_comparator.v:42$4_CHECK[0:0]$46
     3/6: $0$formal$./four_bit_comparator.v:44$5_EN[0:0]$49
     4/6: $0$formal$./four_bit_comparator.v:44$5_CHECK[0:0]$48
     5/6: $0$formal$./four_bit_comparator.v:46$6_EN[0:0]$51
     6/6: $0$formal$./four_bit_comparator.v:46$6_CHECK[0:0]$50

3.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\look_ahead_logic_cell.$formal$./look_ahead_logic_cell.v:27$72_CHECK' from process `\look_ahead_logic_cell.$proc$./look_ahead_logic_cell.v:25$96'.
No latch inferred for signal `\look_ahead_logic_cell.$formal$./look_ahead_logic_cell.v:27$72_EN' from process `\look_ahead_logic_cell.$proc$./look_ahead_logic_cell.v:25$96'.
No latch inferred for signal `\look_ahead_logic_cell.$formal$./look_ahead_logic_cell.v:29$73_CHECK' from process `\look_ahead_logic_cell.$proc$./look_ahead_logic_cell.v:25$96'.
No latch inferred for signal `\look_ahead_logic_cell.$formal$./look_ahead_logic_cell.v:29$73_EN' from process `\look_ahead_logic_cell.$proc$./look_ahead_logic_cell.v:25$96'.
No latch inferred for signal `\look_ahead_logic_cell.$formal$./look_ahead_logic_cell.v:31$74_CHECK' from process `\look_ahead_logic_cell.$proc$./look_ahead_logic_cell.v:25$96'.
No latch inferred for signal `\look_ahead_logic_cell.$formal$./look_ahead_logic_cell.v:31$74_EN' from process `\look_ahead_logic_cell.$proc$./look_ahead_logic_cell.v:25$96'.
No latch inferred for signal `\look_ahead_logic_cell.$formal$./look_ahead_logic_cell.v:33$75_CHECK' from process `\look_ahead_logic_cell.$proc$./look_ahead_logic_cell.v:25$96'.
No latch inferred for signal `\look_ahead_logic_cell.$formal$./look_ahead_logic_cell.v:33$75_EN' from process `\look_ahead_logic_cell.$proc$./look_ahead_logic_cell.v:25$96'.
No latch inferred for signal `\look_ahead_logic_cell.$formal$./look_ahead_logic_cell.v:35$76_CHECK' from process `\look_ahead_logic_cell.$proc$./look_ahead_logic_cell.v:25$96'.
No latch inferred for signal `\look_ahead_logic_cell.$formal$./look_ahead_logic_cell.v:35$76_EN' from process `\look_ahead_logic_cell.$proc$./look_ahead_logic_cell.v:25$96'.
No latch inferred for signal `\look_ahead_logic_cell.$formal$./look_ahead_logic_cell.v:37$77_CHECK' from process `\look_ahead_logic_cell.$proc$./look_ahead_logic_cell.v:25$96'.
No latch inferred for signal `\look_ahead_logic_cell.$formal$./look_ahead_logic_cell.v:37$77_EN' from process `\look_ahead_logic_cell.$proc$./look_ahead_logic_cell.v:25$96'.
No latch inferred for signal `\look_ahead_logic_cell.$formal$./look_ahead_logic_cell.v:40$78_CHECK' from process `\look_ahead_logic_cell.$proc$./look_ahead_logic_cell.v:25$96'.
No latch inferred for signal `\look_ahead_logic_cell.$formal$./look_ahead_logic_cell.v:40$78_EN' from process `\look_ahead_logic_cell.$proc$./look_ahead_logic_cell.v:25$96'.
No latch inferred for signal `\look_ahead_logic_cell.$formal$./look_ahead_logic_cell.v:42$79_CHECK' from process `\look_ahead_logic_cell.$proc$./look_ahead_logic_cell.v:25$96'.
No latch inferred for signal `\look_ahead_logic_cell.$formal$./look_ahead_logic_cell.v:42$79_EN' from process `\look_ahead_logic_cell.$proc$./look_ahead_logic_cell.v:25$96'.
No latch inferred for signal `\four_bit_comparator.$formal$./four_bit_comparator.v:38$1_CHECK' from process `\four_bit_comparator.$proc$./four_bit_comparator.v:37$39'.
No latch inferred for signal `\four_bit_comparator.$formal$./four_bit_comparator.v:38$1_EN' from process `\four_bit_comparator.$proc$./four_bit_comparator.v:37$39'.
No latch inferred for signal `\four_bit_comparator.$formal$./four_bit_comparator.v:39$2_CHECK' from process `\four_bit_comparator.$proc$./four_bit_comparator.v:37$39'.
No latch inferred for signal `\four_bit_comparator.$formal$./four_bit_comparator.v:39$2_EN' from process `\four_bit_comparator.$proc$./four_bit_comparator.v:37$39'.
No latch inferred for signal `\four_bit_comparator.$formal$./four_bit_comparator.v:40$3_CHECK' from process `\four_bit_comparator.$proc$./four_bit_comparator.v:37$39'.
No latch inferred for signal `\four_bit_comparator.$formal$./four_bit_comparator.v:40$3_EN' from process `\four_bit_comparator.$proc$./four_bit_comparator.v:37$39'.
No latch inferred for signal `\four_bit_comparator.$formal$./four_bit_comparator.v:42$4_CHECK' from process `\four_bit_comparator.$proc$./four_bit_comparator.v:37$39'.
No latch inferred for signal `\four_bit_comparator.$formal$./four_bit_comparator.v:42$4_EN' from process `\four_bit_comparator.$proc$./four_bit_comparator.v:37$39'.
No latch inferred for signal `\four_bit_comparator.$formal$./four_bit_comparator.v:44$5_CHECK' from process `\four_bit_comparator.$proc$./four_bit_comparator.v:37$39'.
No latch inferred for signal `\four_bit_comparator.$formal$./four_bit_comparator.v:44$5_EN' from process `\four_bit_comparator.$proc$./four_bit_comparator.v:37$39'.
No latch inferred for signal `\four_bit_comparator.$formal$./four_bit_comparator.v:46$6_CHECK' from process `\four_bit_comparator.$proc$./four_bit_comparator.v:37$39'.
No latch inferred for signal `\four_bit_comparator.$formal$./four_bit_comparator.v:46$6_EN' from process `\four_bit_comparator.$proc$./four_bit_comparator.v:37$39'.

3.3.8. Executing PROC_DFF pass (convert process syncs to FFs).

3.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\look_ahead_logic_cell.$proc$./look_ahead_logic_cell.v:25$96'.
Removing empty process `look_ahead_logic_cell.$proc$./look_ahead_logic_cell.v:25$96'.
Found and cleaned up 2 empty switches in `\four_bit_comparator.$proc$./four_bit_comparator.v:37$39'.
Removing empty process `four_bit_comparator.$proc$./four_bit_comparator.v:37$39'.
Cleaned up 6 empty switches.

3.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module look_ahead_logic_cell.
<suppressed ~1 debug messages>
Optimizing module four_bit_comparator.
<suppressed ~2 debug messages>

3.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \look_ahead_logic_cell..
Finding unused cells or wires in module \four_bit_comparator..
Removed 0 unused cells and 103 unused wires.
<suppressed ~2 debug messages>

3.6. Executing CHECK pass (checking for obvious problems).
checking module four_bit_comparator..
checking module look_ahead_logic_cell..
found and reported 0 problems.

3.7. Executing OPT pass (performing simple optimizations).

3.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module four_bit_comparator.
Optimizing module look_ahead_logic_cell.

3.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\four_bit_comparator'.
<suppressed ~6 debug messages>
Finding identical cells in module `\look_ahead_logic_cell'.
<suppressed ~30 debug messages>
Removed a total of 12 cells.

3.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \four_bit_comparator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \look_ahead_logic_cell..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $procmux$146: \w_TEMP_WIRE_3 -> 1'1
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

3.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \four_bit_comparator.
  Optimizing cells in module \look_ahead_logic_cell.
Performed a total of 0 changes.

3.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\four_bit_comparator'.
Finding identical cells in module `\look_ahead_logic_cell'.
Removed a total of 0 cells.

3.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \four_bit_comparator..
Finding unused cells or wires in module \look_ahead_logic_cell..
Removed 0 unused cells and 12 unused wires.
<suppressed ~2 debug messages>

3.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module four_bit_comparator.
Optimizing module look_ahead_logic_cell.

3.7.8. Rerunning OPT passes. (Maybe there is more to do..)

3.7.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \four_bit_comparator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \look_ahead_logic_cell..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

3.7.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \four_bit_comparator.
  Optimizing cells in module \look_ahead_logic_cell.
Performed a total of 0 changes.

3.7.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\four_bit_comparator'.
Finding identical cells in module `\look_ahead_logic_cell'.
Removed a total of 0 cells.

3.7.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \four_bit_comparator..
Finding unused cells or wires in module \look_ahead_logic_cell..

3.7.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module four_bit_comparator.
Optimizing module look_ahead_logic_cell.

3.7.14. Finished OPT passes. (There is nothing left to do.)

3.8. Executing WREDUCE pass (reducing word size of cells).

3.9. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \four_bit_comparator..
Finding unused cells or wires in module \look_ahead_logic_cell..

3.11. Executing MEMORY_COLLECT pass (generating $mem cells).

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module four_bit_comparator.
Optimizing module look_ahead_logic_cell.

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\four_bit_comparator'.
Finding identical cells in module `\look_ahead_logic_cell'.
Removed a total of 0 cells.

3.12.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \four_bit_comparator..
Finding unused cells or wires in module \look_ahead_logic_cell..

3.12.4. Finished fast OPT passes.

3.13. Printing statistics.

=== four_bit_comparator ===

   Number of wires:                 49
   Number of wire bits:             64
   Number of public wires:           8
   Number of public wire bits:      23
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 59
     $and                           22
     $assert                         3
     $cover                          3
     $gt                             1
     $lt                             1
     $mux                           10
     $not                           11
     $or                             7
     look_ahead_logic_cell           1

=== look_ahead_logic_cell ===

   Number of wires:                 42
   Number of wire bits:             51
   Number of public wires:           7
   Number of public wire bits:      16
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 50
     $and                            5
     $assert                         8
     $eq                             3
     $logic_and                      5
     $mux                           16
     $ne                             3
     $not                            6
     $xor                            4

=== design hierarchy ===

   four_bit_comparator               1
     look_ahead_logic_cell           1

   Number of wires:                 91
   Number of wire bits:            115
   Number of public wires:          15
   Number of public wire bits:      39
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                108
     $and                           27
     $assert                        11
     $cover                          3
     $eq                             3
     $gt                             1
     $logic_and                      5
     $lt                             1
     $mux                           26
     $ne                             3
     $not                           17
     $or                             7
     $xor                            4

3.14. Executing CHECK pass (checking for obvious problems).
checking module four_bit_comparator..
checking module look_ahead_logic_cell..
found and reported 0 problems.

4. Executing MEMORY_NORDFF pass (extracting $dff cells from $mem).

5. Executing ASYNC2SYNC pass.

6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \four_bit_comparator..
Finding unused cells or wires in module \look_ahead_logic_cell..

7. Executing SETUNDEF pass (replace undef values with defined constants).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module four_bit_comparator.
Optimizing module look_ahead_logic_cell.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\four_bit_comparator'.
Finding identical cells in module `\look_ahead_logic_cell'.
Removed a total of 0 cells.

8.3. Executing OPT_DFF pass (perform DFF optimizations).

8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \four_bit_comparator..
Finding unused cells or wires in module \look_ahead_logic_cell..

8.5. Finished fast OPT passes.

9. Executing CHECK pass (checking for obvious problems).
checking module four_bit_comparator..
checking module look_ahead_logic_cell..
found and reported 0 problems.

10. Executing HIERARCHY pass (managing design hierarchy).

10.1. Analyzing design hierarchy..
Top module:  \four_bit_comparator
Used module:     \look_ahead_logic_cell

10.2. Analyzing design hierarchy..
Top module:  \four_bit_comparator
Used module:     \look_ahead_logic_cell
Removed 0 unused modules.
Module four_bit_comparator directly or indirectly contains formal properties -> setting "keep" attribute.
Module look_ahead_logic_cell directly or indirectly contains formal properties -> setting "keep" attribute.

11. Executing RTLIL backend.
Output filename: ../model/design.il

End of script. Logfile hash: 0428a9a38b, CPU: user 0.05s system 0.01s, MEM: 13.87 MB peak
Yosys 0.9+3627 (git sha1 06347b119b, g++ 9.3.0 -fPIC -Os)
Time spent: 22% 6x opt_expr (0 sec), 21% 7x opt_clean (0 sec), ...
