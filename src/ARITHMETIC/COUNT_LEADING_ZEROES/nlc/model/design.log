
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 a1785e988b, g++ 9.3.0 -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: ./nibble_local_count.v
Parsing formal SystemVerilog input from `./nibble_local_count.v' to AST representation.
Storing AST representation for module `$abstract\nibble_local_count'.
Successfully finished Verilog frontend.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\nibble_local_count'.
Generating RTLIL representation for module `\nibble_local_count'.

2.2.1. Analyzing design hierarchy..
Top module:  \nibble_local_count

2.2.2. Analyzing design hierarchy..
Top module:  \nibble_local_count
Removing unused module `$abstract\nibble_local_count'.
Removed 1 unused modules.
Module nibble_local_count directly or indirectly contains formal properties -> setting "keep" attribute.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$./nibble_local_count.v:15$29 in module nibble_local_count.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).

2.3.5. Executing PROC_ARST pass (detect async resets in processes).

2.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
     1/36: $0$formal$./nibble_local_count.v:19$1_EN[0:0]$31
     2/36: $0$formal$./nibble_local_count.v:19$1_CHECK[0:0]$30
     3/36: $0$formal$./nibble_local_count.v:20$2_EN[0:0]$33
     4/36: $0$formal$./nibble_local_count.v:20$2_CHECK[0:0]$32
     5/36: $0$formal$./nibble_local_count.v:24$3_EN[0:0]$35
     6/36: $0$formal$./nibble_local_count.v:24$3_CHECK[0:0]$34
     7/36: $0$formal$./nibble_local_count.v:25$4_EN[0:0]$37
     8/36: $0$formal$./nibble_local_count.v:25$4_CHECK[0:0]$36
     9/36: $0$formal$./nibble_local_count.v:29$5_EN[0:0]$39
    10/36: $0$formal$./nibble_local_count.v:29$5_CHECK[0:0]$38
    11/36: $0$formal$./nibble_local_count.v:30$6_EN[0:0]$41
    12/36: $0$formal$./nibble_local_count.v:30$6_CHECK[0:0]$40
    13/36: $0$formal$./nibble_local_count.v:34$7_EN[0:0]$43
    14/36: $0$formal$./nibble_local_count.v:34$7_CHECK[0:0]$42
    15/36: $0$formal$./nibble_local_count.v:35$8_EN[0:0]$45
    16/36: $0$formal$./nibble_local_count.v:35$8_CHECK[0:0]$44
    17/36: $0$formal$./nibble_local_count.v:39$9_EN[0:0]$47
    18/36: $0$formal$./nibble_local_count.v:39$9_CHECK[0:0]$46
    19/36: $0$formal$./nibble_local_count.v:40$10_EN[0:0]$49
    20/36: $0$formal$./nibble_local_count.v:40$10_CHECK[0:0]$48
    21/36: $0$formal$./nibble_local_count.v:44$11_EN[0:0]$51
    22/36: $0$formal$./nibble_local_count.v:44$11_CHECK[0:0]$50
    23/36: $0$formal$./nibble_local_count.v:45$12_EN[0:0]$53
    24/36: $0$formal$./nibble_local_count.v:45$12_CHECK[0:0]$52
    25/36: $0$formal$./nibble_local_count.v:49$13_EN[0:0]$55
    26/36: $0$formal$./nibble_local_count.v:49$13_CHECK[0:0]$54
    27/36: $0$formal$./nibble_local_count.v:50$14_EN[0:0]$57
    28/36: $0$formal$./nibble_local_count.v:50$14_CHECK[0:0]$56
    29/36: $0$formal$./nibble_local_count.v:54$15_EN[0:0]$59
    30/36: $0$formal$./nibble_local_count.v:54$15_CHECK[0:0]$58
    31/36: $0$formal$./nibble_local_count.v:55$16_EN[0:0]$61
    32/36: $0$formal$./nibble_local_count.v:55$16_CHECK[0:0]$60
    33/36: $0$formal$./nibble_local_count.v:59$17_EN[0:0]$63
    34/36: $0$formal$./nibble_local_count.v:59$17_CHECK[0:0]$62
    35/36: $0$formal$./nibble_local_count.v:60$18_EN[0:0]$65
    36/36: $0$formal$./nibble_local_count.v:60$18_CHECK[0:0]$64

2.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:19$1_CHECK' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:19$1_EN' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:20$2_CHECK' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:20$2_EN' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:24$3_CHECK' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:24$3_EN' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:25$4_CHECK' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:25$4_EN' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:29$5_CHECK' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:29$5_EN' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:30$6_CHECK' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:30$6_EN' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:34$7_CHECK' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:34$7_EN' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:35$8_CHECK' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:35$8_EN' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:39$9_CHECK' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:39$9_EN' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:40$10_CHECK' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:40$10_EN' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:44$11_CHECK' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:44$11_EN' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:45$12_CHECK' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:45$12_EN' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:49$13_CHECK' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:49$13_EN' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:50$14_CHECK' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:50$14_EN' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:54$15_CHECK' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:54$15_EN' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:55$16_CHECK' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:55$16_EN' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:59$17_CHECK' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:59$17_EN' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:60$18_CHECK' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
No latch inferred for signal `\nibble_local_count.$formal$./nibble_local_count.v:60$18_EN' from process `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.

2.3.8. Executing PROC_DFF pass (convert process syncs to FFs).

2.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\nibble_local_count.$proc$./nibble_local_count.v:15$29'.
Removing empty process `nibble_local_count.$proc$./nibble_local_count.v:15$29'.
Cleaned up 1 empty switch.

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module nibble_local_count.
<suppressed ~26 debug messages>

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nibble_local_count..
Removed 0 unused cells and 84 unused wires.
<suppressed ~1 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
checking module nibble_local_count..
found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nibble_local_count.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nibble_local_count'.
<suppressed ~186 debug messages>
Removed a total of 62 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nibble_local_count..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~36 debug messages>

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nibble_local_count.
    New ctrl vector for $pmux cell $procmux$311: $auto$opt_reduce.cc:134:opt_mux$351
    New ctrl vector for $pmux cell $procmux$321: $auto$opt_reduce.cc:134:opt_mux$353
    New ctrl vector for $pmux cell $procmux$331: $auto$opt_reduce.cc:134:opt_mux$355
    New ctrl vector for $pmux cell $procmux$341: $auto$opt_reduce.cc:134:opt_mux$357
  Optimizing cells in module \nibble_local_count.
Performed a total of 4 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nibble_local_count'.
<suppressed ~36 debug messages>
Removed a total of 12 cells.

2.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nibble_local_count..
Removed 0 unused cells and 74 unused wires.
<suppressed ~1 debug messages>

2.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module nibble_local_count.

2.7.8. Rerunning OPT passes. (Maybe there is more to do..)

2.7.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nibble_local_count..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

2.7.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nibble_local_count.
Performed a total of 0 changes.

2.7.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nibble_local_count'.
Removed a total of 0 cells.

2.7.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nibble_local_count..

2.7.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module nibble_local_count.

2.7.14. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell nibble_local_count.$eq$./nibble_local_count.v:41$75 ($eq).
Removed top 3 bits (of 4) from port B of cell nibble_local_count.$procmux$150_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell nibble_local_count.$procmux$185_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell nibble_local_count.$procmux$216_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell nibble_local_count.$procmux$243_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell nibble_local_count.$procmux$266_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell nibble_local_count.$procmux$285_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell nibble_local_count.$procmux$300_CMP0 ($eq).

2.9. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nibble_local_count..

2.11. Executing MEMORY_COLLECT pass (generating $mem cells).

2.12. Executing OPT pass (performing simple optimizations).

2.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nibble_local_count.

2.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nibble_local_count'.
Removed a total of 0 cells.

2.12.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nibble_local_count..

2.12.4. Finished fast OPT passes.

2.13. Printing statistics.

=== nibble_local_count ===

   Number of wires:                 51
   Number of wire bits:             55
   Number of public wires:           5
   Number of public wire bits:       9
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 67
     $and                            1
     $assert                        18
     $eq                            10
     $logic_not                      2
     $mux                           27
     $not                            4
     $or                             4
     $reduce_or                      1

2.14. Executing CHECK pass (checking for obvious problems).
checking module nibble_local_count..
found and reported 0 problems.

3. Executing MEMORY_NORDFF pass (extracting $dff cells from $mem).

4. Executing ASYNC2SYNC pass.

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nibble_local_count..

6. Executing SETUNDEF pass (replace undef values with defined constants).

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nibble_local_count.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nibble_local_count'.
Removed a total of 0 cells.

7.3. Executing OPT_RMDFF pass (remove dff with constant values).

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nibble_local_count..

7.5. Finished fast OPT passes.

8. Executing CHECK pass (checking for obvious problems).
checking module nibble_local_count..
found and reported 0 problems.

9. Executing HIERARCHY pass (managing design hierarchy).

9.1. Analyzing design hierarchy..
Top module:  \nibble_local_count

9.2. Analyzing design hierarchy..
Top module:  \nibble_local_count
Removed 0 unused modules.
Module nibble_local_count directly or indirectly contains formal properties -> setting "keep" attribute.

10. Executing ILANG backend.
Output filename: ../model/design.il

End of script. Logfile hash: 288c0cfd71, CPU: user 0.05s system 0.00s, MEM: 13.59 MB peak
Yosys 0.9+2406 (git sha1 a1785e988b, g++ 9.3.0 -fPIC -Os)
Time spent: 18% 7x opt_clean (0 sec), 18% 6x opt_expr (0 sec), ...
