//
// Generated by Bluespec Compiler (build 0000000)
//
// On Fri Nov 13 18:38:03 PST 2020
//
//
// Ports:
// Name                         I/O  size props
// valid_input                    O     1
// res                            O    32 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// load_i_WORD                    I    32 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module sqrt(CLK,
	    RST_N,

	    load_i_WORD,

	    valid_input,

	    res);
  input  CLK;
  input  RST_N;

  // action method load
  input  [31 : 0] load_i_WORD;

  // value method valid_input
  output valid_input;

  // value method res
  output [31 : 0] res;

  // signals for module outputs
  wire [31 : 0] res;
  wire valid_input;

  // register bitmask
  reg [31 : 0] bitmask;
  wire [31 : 0] bitmask$D_IN;
  wire bitmask$EN;

  // register data
  reg [31 : 0] data;
  wire [31 : 0] data$D_IN;
  wire data$EN;

  // register del_a
  reg [31 : 0] del_a;
  wire [31 : 0] del_a$D_IN;
  wire del_a$EN;

  // register del_b
  reg [31 : 0] del_b;
  wire [31 : 0] del_b$D_IN;
  wire del_b$EN;

  // register value
  reg [31 : 0] value;
  wire [31 : 0] value$D_IN;
  wire value$EN;

  // value method valid_input
  assign valid_input = !data[31] ;

  // value method res
  assign res = data ;

  // register bitmask
  assign bitmask$D_IN = 32'h0 ;
  assign bitmask$EN = 1'b0 ;

  // register data
  assign data$D_IN = load_i_WORD ;
  assign data$EN = 1'd1 ;

  // register del_a
  assign del_a$D_IN = 32'h0 ;
  assign del_a$EN = 1'b0 ;

  // register del_b
  assign del_b$D_IN = 32'h0 ;
  assign del_b$EN = 1'b0 ;

  // register value
  assign value$D_IN = 32'h0 ;
  assign value$EN = 1'b0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        bitmask <= `BSV_ASSIGNMENT_DELAY 32'h00008000;
	data <= `BSV_ASSIGNMENT_DELAY 32'd0;
	del_a <= `BSV_ASSIGNMENT_DELAY 32'd0;
	del_b <= `BSV_ASSIGNMENT_DELAY 32'd1073741824;
	value <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (bitmask$EN) bitmask <= `BSV_ASSIGNMENT_DELAY bitmask$D_IN;
	if (data$EN) data <= `BSV_ASSIGNMENT_DELAY data$D_IN;
	if (del_a$EN) del_a <= `BSV_ASSIGNMENT_DELAY del_a$D_IN;
	if (del_b$EN) del_b <= `BSV_ASSIGNMENT_DELAY del_b$D_IN;
	if (value$EN) value <= `BSV_ASSIGNMENT_DELAY value$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    bitmask = 32'hAAAAAAAA;
    data = 32'hAAAAAAAA;
    del_a = 32'hAAAAAAAA;
    del_b = 32'hAAAAAAAA;
    value = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // sqrt

