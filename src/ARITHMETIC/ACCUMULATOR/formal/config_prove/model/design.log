
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+932 (git sha1 65f197e2, clang 6.0.0-1ubuntu2 -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: mkAccumulator_formal.v
Parsing formal SystemVerilog input from `mkAccumulator_formal.v' to AST representation.
Warning: Found one of those horrible `(synopsys|synthesis) translate_off' comments.
Yosys does support them but it is recommended to use `ifdef constructs instead!
Storing AST representation for module `$abstract\mkAccumulator_formal'.
Successfully finished Verilog frontend.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\mkAccumulator_formal'.
Generating RTLIL representation for module `\mkAccumulator_formal'.

2.2.1. Analyzing design hierarchy..
Top module:  \mkAccumulator_formal

2.2.2. Analyzing design hierarchy..
Top module:  \mkAccumulator_formal
Removing unused module `$abstract\mkAccumulator_formal'.
Removed 1 unused modules.
Module mkAccumulator_formal directly or indirectly contains formal properties -> setting "keep" attribute.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$mkAccumulator_formal.v:104$23 in module mkAccumulator_formal.
Marked 1 switch rules as full_case in process $proc$mkAccumulator_formal.v:79$21 in module mkAccumulator_formal.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 23 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:120$94'.
  Set init value: $formal$mkAccumulator_formal.v:120$19_EN = 1'0
Found init rule in `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:118$92'.
  Set init value: $formal$mkAccumulator_formal.v:118$18_EN = 1'0
Found init rule in `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:116$90'.
  Set init value: $formal$mkAccumulator_formal.v:116$17_EN = 1'0
Found init rule in `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:114$88'.
  Set init value: $formal$mkAccumulator_formal.v:114$16_EN = 1'0
Found init rule in `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:113$86'.
  Set init value: $formal$mkAccumulator_formal.v:113$15_EN = 1'0
Found init rule in `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:112$84'.
  Set init value: $formal$mkAccumulator_formal.v:112$14_EN = 1'0
Found init rule in `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:107$82'.
  Set init value: $formal$mkAccumulator_formal.v:107$13_EN = 1'0
Found init rule in `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:103$81'.
  Set init value: \f_past_valid = 1'0

2.3.5. Executing PROC_ARST pass (detect async resets in processes).

2.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:120$94'.
Creating decoders for process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:118$92'.
Creating decoders for process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:116$90'.
Creating decoders for process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:114$88'.
Creating decoders for process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:113$86'.
Creating decoders for process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:112$84'.
Creating decoders for process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:107$82'.
Creating decoders for process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:103$81'.
Creating decoders for process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
     1/12: $0$formal$mkAccumulator_formal.v:112$14_EN[0:0]$39
     2/12: $0$formal$mkAccumulator_formal.v:112$14_CHECK[0:0]$38
     3/12: $0$formal$mkAccumulator_formal.v:113$15_EN[0:0]$41
     4/12: $0$formal$mkAccumulator_formal.v:113$15_CHECK[0:0]$40
     5/12: $0$formal$mkAccumulator_formal.v:114$16_EN[0:0]$43
     6/12: $0$formal$mkAccumulator_formal.v:114$16_CHECK[0:0]$42
     7/12: $0$formal$mkAccumulator_formal.v:116$17_EN[0:0]$45
     8/12: $0$formal$mkAccumulator_formal.v:116$17_CHECK[0:0]$44
     9/12: $0$formal$mkAccumulator_formal.v:118$18_EN[0:0]$47
    10/12: $0$formal$mkAccumulator_formal.v:118$18_CHECK[0:0]$46
    11/12: $0$formal$mkAccumulator_formal.v:120$19_EN[0:0]$49
    12/12: $0$formal$mkAccumulator_formal.v:120$19_CHECK[0:0]$48
Creating decoders for process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:79$21'.
     1/1: $0\acc_total[31:0]

2.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

2.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\mkAccumulator_formal.\f_past_valid' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
  created $dff cell `$procdff$169' with positive edge clock.
Creating register for signal `\mkAccumulator_formal.$past$mkAccumulator_formal.v:107$1$0' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
  created $dff cell `$procdff$170' with positive edge clock.
Creating register for signal `\mkAccumulator_formal.$past$mkAccumulator_formal.v:108$2$0' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
  created $dff cell `$procdff$171' with positive edge clock.
Creating register for signal `\mkAccumulator_formal.$past$mkAccumulator_formal.v:110$3$0' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
  created $dff cell `$procdff$172' with positive edge clock.
Creating register for signal `\mkAccumulator_formal.$past$mkAccumulator_formal.v:112$4$0' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
  created $dff cell `$procdff$173' with positive edge clock.
Creating register for signal `\mkAccumulator_formal.$past$mkAccumulator_formal.v:113$5$0' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
  created $dff cell `$procdff$174' with positive edge clock.
Creating register for signal `\mkAccumulator_formal.$past$mkAccumulator_formal.v:114$6$0' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
  created $dff cell `$procdff$175' with positive edge clock.
Creating register for signal `\mkAccumulator_formal.$past$mkAccumulator_formal.v:115$7$0' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
  created $dff cell `$procdff$176' with positive edge clock.
Creating register for signal `\mkAccumulator_formal.$past$mkAccumulator_formal.v:117$8$0' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
  created $dff cell `$procdff$177' with positive edge clock.
Creating register for signal `\mkAccumulator_formal.$past$mkAccumulator_formal.v:118$9$0' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
  created $dff cell `$procdff$178' with positive edge clock.
Creating register for signal `\mkAccumulator_formal.$past$mkAccumulator_formal.v:118$10$0' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
  created $dff cell `$procdff$179' with positive edge clock.
Creating register for signal `\mkAccumulator_formal.$past$mkAccumulator_formal.v:119$11$0' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
  created $dff cell `$procdff$180' with positive edge clock.
Creating register for signal `\mkAccumulator_formal.$past$mkAccumulator_formal.v:120$12$0' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
  created $dff cell `$procdff$181' with positive edge clock.
Creating register for signal `\mkAccumulator_formal.$formal$mkAccumulator_formal.v:107$13_CHECK' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
  created $dff cell `$procdff$182' with positive edge clock.
Creating register for signal `\mkAccumulator_formal.$formal$mkAccumulator_formal.v:107$13_EN' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
  created $dff cell `$procdff$183' with positive edge clock.
Creating register for signal `\mkAccumulator_formal.$formal$mkAccumulator_formal.v:112$14_CHECK' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
  created $dff cell `$procdff$184' with positive edge clock.
Creating register for signal `\mkAccumulator_formal.$formal$mkAccumulator_formal.v:112$14_EN' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
  created $dff cell `$procdff$185' with positive edge clock.
Creating register for signal `\mkAccumulator_formal.$formal$mkAccumulator_formal.v:113$15_CHECK' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
  created $dff cell `$procdff$186' with positive edge clock.
Creating register for signal `\mkAccumulator_formal.$formal$mkAccumulator_formal.v:113$15_EN' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
  created $dff cell `$procdff$187' with positive edge clock.
Creating register for signal `\mkAccumulator_formal.$formal$mkAccumulator_formal.v:114$16_CHECK' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
  created $dff cell `$procdff$188' with positive edge clock.
Creating register for signal `\mkAccumulator_formal.$formal$mkAccumulator_formal.v:114$16_EN' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
  created $dff cell `$procdff$189' with positive edge clock.
Creating register for signal `\mkAccumulator_formal.$formal$mkAccumulator_formal.v:116$17_CHECK' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
  created $dff cell `$procdff$190' with positive edge clock.
Creating register for signal `\mkAccumulator_formal.$formal$mkAccumulator_formal.v:116$17_EN' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
  created $dff cell `$procdff$191' with positive edge clock.
Creating register for signal `\mkAccumulator_formal.$formal$mkAccumulator_formal.v:118$18_CHECK' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
  created $dff cell `$procdff$192' with positive edge clock.
Creating register for signal `\mkAccumulator_formal.$formal$mkAccumulator_formal.v:118$18_EN' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
  created $dff cell `$procdff$193' with positive edge clock.
Creating register for signal `\mkAccumulator_formal.$formal$mkAccumulator_formal.v:120$19_CHECK' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
  created $dff cell `$procdff$194' with positive edge clock.
Creating register for signal `\mkAccumulator_formal.$formal$mkAccumulator_formal.v:120$19_EN' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
  created $dff cell `$procdff$195' with positive edge clock.
Creating register for signal `\mkAccumulator_formal.\acc_total' using process `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:79$21'.
  created $dff cell `$procdff$196' with positive edge clock.

2.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `mkAccumulator_formal.$proc$mkAccumulator_formal.v:120$94'.
Removing empty process `mkAccumulator_formal.$proc$mkAccumulator_formal.v:118$92'.
Removing empty process `mkAccumulator_formal.$proc$mkAccumulator_formal.v:116$90'.
Removing empty process `mkAccumulator_formal.$proc$mkAccumulator_formal.v:114$88'.
Removing empty process `mkAccumulator_formal.$proc$mkAccumulator_formal.v:113$86'.
Removing empty process `mkAccumulator_formal.$proc$mkAccumulator_formal.v:112$84'.
Removing empty process `mkAccumulator_formal.$proc$mkAccumulator_formal.v:107$82'.
Removing empty process `mkAccumulator_formal.$proc$mkAccumulator_formal.v:103$81'.
Found and cleaned up 5 empty switches in `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
Removing empty process `mkAccumulator_formal.$proc$mkAccumulator_formal.v:104$23'.
Found and cleaned up 2 empty switches in `\mkAccumulator_formal.$proc$mkAccumulator_formal.v:79$21'.
Removing empty process `mkAccumulator_formal.$proc$mkAccumulator_formal.v:79$21'.
Cleaned up 7 empty switches.

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkAccumulator_formal.
<suppressed ~10 debug messages>

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkAccumulator_formal..
Removed 2 unused cells and 73 unused wires.
<suppressed ~3 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
checking module mkAccumulator_formal..
found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkAccumulator_formal.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkAccumulator_formal'.
<suppressed ~33 debug messages>
Removed a total of 11 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mkAccumulator_formal..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$133.
    dead port 2/2 on $mux $procmux$140.
    dead port 1/2 on $mux $procmux$146.
    dead port 2/2 on $mux $procmux$146.
    dead port 2/2 on $mux $procmux$149.
    dead port 1/2 on $mux $procmux$155.
    dead port 2/2 on $mux $procmux$155.
    dead port 2/2 on $mux $procmux$158.
Removed 8 multiplexer ports.
<suppressed ~13 debug messages>

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mkAccumulator_formal.
    New ctrl vector for $mux cell $procmux$151: { }
    New ctrl vector for $mux cell $procmux$153: { }
    New ctrl vector for $mux cell $procmux$160: { }
    New ctrl vector for $mux cell $procmux$162: { }
  Optimizing cells in module \mkAccumulator_formal.
Performed a total of 4 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkAccumulator_formal'.
<suppressed ~27 debug messages>
Removed a total of 9 cells.

2.7.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$194 ($dff) from module mkAccumulator_formal.
Removing $procdff$195 ($dff) from module mkAccumulator_formal.
Replaced 2 DFF cells.

2.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkAccumulator_formal..
Removed 4 unused cells and 36 unused wires.
<suppressed ~10 debug messages>

2.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkAccumulator_formal.

2.7.9. Rerunning OPT passes. (Maybe there is more to do..)

2.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mkAccumulator_formal..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

2.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mkAccumulator_formal.
Performed a total of 0 changes.

2.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkAccumulator_formal'.
Removed a total of 0 cells.

2.7.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkAccumulator_formal..

2.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkAccumulator_formal.

2.7.16. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell mkAccumulator_formal.$and$mkAccumulator_formal.v:108$51 ($and).
Removed top 31 bits (of 32) from port Y of cell mkAccumulator_formal.$and$mkAccumulator_formal.v:108$51 ($and).
Removed top 31 bits (of 32) from port B of cell mkAccumulator_formal.$and$mkAccumulator_formal.v:108$53 ($and).
Removed top 31 bits (of 32) from port Y of cell mkAccumulator_formal.$and$mkAccumulator_formal.v:108$53 ($and).
Removed top 25 bits (of 32) from port B of cell mkAccumulator_formal.$eq$mkAccumulator_formal.v:113$60 ($eq).
Removed top 31 bits (of 32) from wire mkAccumulator_formal.$and$mkAccumulator_formal.v:108$51_Y.
Removed top 31 bits (of 32) from wire mkAccumulator_formal.$and$mkAccumulator_formal.v:108$53_Y.

2.9. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkAccumulator_formal..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.11. Executing MEMORY_COLLECT pass (generating $mem cells).

2.12. Executing OPT pass (performing simple optimizations).

2.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkAccumulator_formal.
<suppressed ~2 debug messages>

2.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkAccumulator_formal'.
Removed a total of 0 cells.

2.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkAccumulator_formal..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.12.5. Finished fast OPT passes.

2.13. Printing statistics.

=== mkAccumulator_formal ===

   Number of wires:                 54
   Number of wire bits:            333
   Number of public wires:           9
   Number of public wire bits:     133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 55
     $add                            2
     $assert                         3
     $assume                         1
     $cover                          3
     $dff                           15
     $eq                             3
     $logic_and                      6
     $logic_not                      3
     $mux                           18
     $ne                             1

2.14. Executing CHECK pass (checking for obvious problems).
checking module mkAccumulator_formal..
found and reported 0 problems.

3. Executing MEMORY_NORDFF pass (extracting $dff cells from $mem).

4. Executing ASYNC2SYNC pass.

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkAccumulator_formal..
Removed 16 unused cells and 16 unused wires.
<suppressed ~17 debug messages>

6. Executing SETUNDEF pass (replace undef values with defined constants).

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mkAccumulator_formal.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mkAccumulator_formal'.
Removed a total of 0 cells.

7.3. Executing OPT_RMDFF pass (remove dff with constant values).

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mkAccumulator_formal..

7.5. Finished fast OPT passes.

8. Executing CHECK pass (checking for obvious problems).
checking module mkAccumulator_formal..
found and reported 0 problems.

9. Executing HIERARCHY pass (managing design hierarchy).

9.1. Analyzing design hierarchy..
Top module:  \mkAccumulator_formal

9.2. Analyzing design hierarchy..
Top module:  \mkAccumulator_formal
Removed 0 unused modules.
Module mkAccumulator_formal directly or indirectly contains formal properties -> setting "keep" attribute.

10. Executing ILANG backend.
Output filename: ../model/design.il

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 665141cc15
CPU: user 0.05s system 0.01s, MEM: 45.22 MB total, 10.28 MB resident
Yosys 0.9+932 (git sha1 65f197e2, clang 6.0.0-1ubuntu2 -fPIC -Os)
Time spent: 28% 7x opt_clean (0 sec), 18% 6x opt_expr (0 sec), ...
