//
// Generated by Bluespec Compiler (build 0000000)
//
// On Fri Feb  5 15:01:33 PST 2021
//
//
// Ports:
// Name                         I/O  size props
// o_SUM                          O    16 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// i_DATA_IN                      I    16
// i_ENABLE                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkOnesCompAcc(CLK,
		     RST_N,

		     i_DATA_IN,
		     i_ENABLE,

		     o_SUM);
  input  CLK;
  input  RST_N;

  // action method write
  input  [15 : 0] i_DATA_IN;
  input  i_ENABLE;

  // value method read
  output [15 : 0] o_SUM;

  // signals for module outputs
  wire [15 : 0] o_SUM;

  // register acc_total
  reg [16 : 0] acc_total;
  wire [16 : 0] acc_total$D_IN;
  wire acc_total$EN;

  // remaining internal signals
  wire [16 : 0] i_DATA_IN__h137, x__h134, x__h138;

  // value method read
  assign o_SUM = acc_total[15:0] ;

  // register acc_total
  assign acc_total$D_IN = acc_total[15] ? x__h134 : x__h138 ;
  assign acc_total$EN = i_ENABLE ;

  // remaining internal signals
  assign i_DATA_IN__h137 = { 1'd0, i_DATA_IN } ;
  assign x__h134 = acc_total + 17'd1 ;
  assign x__h138 = acc_total + i_DATA_IN__h137 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        acc_total <= `BSV_ASSIGNMENT_DELAY 17'd0;
      end
    else
      begin
        if (acc_total$EN) acc_total <= `BSV_ASSIGNMENT_DELAY acc_total$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    acc_total = 17'h0AAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkOnesCompAcc

