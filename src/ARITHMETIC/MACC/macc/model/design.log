
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 a1785e988b, g++ 9.3.0 -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: ./macc.v
Parsing formal SystemVerilog input from `./macc.v' to AST representation.
Storing AST representation for module `$abstract\macc'.
Successfully finished Verilog frontend.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\macc'.
Generating RTLIL representation for module `\macc'.

2.2.1. Analyzing design hierarchy..
Top module:  \macc

2.2.2. Analyzing design hierarchy..
Top module:  \macc
Removing unused module `$abstract\macc'.
Removed 1 unused modules.
Module macc directly or indirectly contains formal properties -> setting "keep" attribute.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$./macc.v:40$17 in module macc.
Marked 2 switch rules as full_case in process $proc$./macc.v:13$12 in module macc.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 17 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\macc.$proc$./macc.v:0$63'.
  Set init value: $formal$./macc.v:52$11_EN = 1'0
Found init rule in `\macc.$proc$./macc.v:0$61'.
  Set init value: $formal$./macc.v:51$10_EN = 1'0
Found init rule in `\macc.$proc$./macc.v:0$59'.
  Set init value: $formal$./macc.v:50$9_EN = 1'0
Found init rule in `\macc.$proc$./macc.v:0$57'.
  Set init value: $formal$./macc.v:46$8_EN = 1'0
Found init rule in `\macc.$proc$./macc.v:0$55'.
  Set init value: $formal$./macc.v:42$7_EN = 1'0
Found init rule in `\macc.$proc$./macc.v:0$54'.
  Set init value: \r_MUL_RESULT = 8'00000000
  Set init value: \r_SUM_RESULT = 8'00000000
Found init rule in `\macc.$proc$./macc.v:33$53'.
  Set init value: \fr_past_valid = 1'0

2.3.5. Executing PROC_ARST pass (detect async resets in processes).

2.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\macc.$proc$./macc.v:0$63'.
Creating decoders for process `\macc.$proc$./macc.v:0$61'.
Creating decoders for process `\macc.$proc$./macc.v:0$59'.
Creating decoders for process `\macc.$proc$./macc.v:0$57'.
Creating decoders for process `\macc.$proc$./macc.v:0$55'.
Creating decoders for process `\macc.$proc$./macc.v:0$54'.
Creating decoders for process `\macc.$proc$./macc.v:33$53'.
Creating decoders for process `\macc.$proc$./macc.v:40$17'.
     1/8: $0$formal$./macc.v:46$8_EN[0:0]$27
     2/8: $0$formal$./macc.v:46$8_CHECK[0:0]$26
     3/8: $0$formal$./macc.v:50$9_EN[0:0]$29
     4/8: $0$formal$./macc.v:50$9_CHECK[0:0]$28
     5/8: $0$formal$./macc.v:51$10_EN[0:0]$31
     6/8: $0$formal$./macc.v:51$10_CHECK[0:0]$30
     7/8: $0$formal$./macc.v:52$11_EN[0:0]$33
     8/8: $0$formal$./macc.v:52$11_CHECK[0:0]$32
Creating decoders for process `\macc.$proc$./macc.v:13$12'.
     1/3: $0\r_SUM_RESULT[7:0]
     2/3: $0\r_MUL_RESULT[7:0]
     3/3: $0\o_RESULT[7:0]

2.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

2.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\macc.\fr_past_valid' using process `\macc.$proc$./macc.v:40$17'.
  created $dff cell `$procdff$105' with positive edge clock.
Creating register for signal `\macc.$past$./macc.v:43$1$0' using process `\macc.$proc$./macc.v:40$17'.
  created $dff cell `$procdff$106' with positive edge clock.
Creating register for signal `\macc.$past$./macc.v:44$2$0' using process `\macc.$proc$./macc.v:40$17'.
  created $dff cell `$procdff$107' with positive edge clock.
Creating register for signal `\macc.$past$./macc.v:46$3$0' using process `\macc.$proc$./macc.v:40$17'.
  created $dff cell `$procdff$108' with positive edge clock.
Creating register for signal `\macc.$past$./macc.v:51$4$0' using process `\macc.$proc$./macc.v:40$17'.
  created $dff cell `$procdff$109' with positive edge clock.
Creating register for signal `\macc.$past$./macc.v:52$5$0' using process `\macc.$proc$./macc.v:40$17'.
  created $dff cell `$procdff$110' with positive edge clock.
Creating register for signal `\macc.$past$./macc.v:53$6$0' using process `\macc.$proc$./macc.v:40$17'.
  created $dff cell `$procdff$111' with positive edge clock.
Creating register for signal `\macc.$formal$./macc.v:42$7_CHECK' using process `\macc.$proc$./macc.v:40$17'.
  created $dff cell `$procdff$112' with positive edge clock.
Creating register for signal `\macc.$formal$./macc.v:42$7_EN' using process `\macc.$proc$./macc.v:40$17'.
  created $dff cell `$procdff$113' with positive edge clock.
Creating register for signal `\macc.$formal$./macc.v:46$8_CHECK' using process `\macc.$proc$./macc.v:40$17'.
  created $dff cell `$procdff$114' with positive edge clock.
Creating register for signal `\macc.$formal$./macc.v:46$8_EN' using process `\macc.$proc$./macc.v:40$17'.
  created $dff cell `$procdff$115' with positive edge clock.
Creating register for signal `\macc.$formal$./macc.v:50$9_CHECK' using process `\macc.$proc$./macc.v:40$17'.
  created $dff cell `$procdff$116' with positive edge clock.
Creating register for signal `\macc.$formal$./macc.v:50$9_EN' using process `\macc.$proc$./macc.v:40$17'.
  created $dff cell `$procdff$117' with positive edge clock.
Creating register for signal `\macc.$formal$./macc.v:51$10_CHECK' using process `\macc.$proc$./macc.v:40$17'.
  created $dff cell `$procdff$118' with positive edge clock.
Creating register for signal `\macc.$formal$./macc.v:51$10_EN' using process `\macc.$proc$./macc.v:40$17'.
  created $dff cell `$procdff$119' with positive edge clock.
Creating register for signal `\macc.$formal$./macc.v:52$11_CHECK' using process `\macc.$proc$./macc.v:40$17'.
  created $dff cell `$procdff$120' with positive edge clock.
Creating register for signal `\macc.$formal$./macc.v:52$11_EN' using process `\macc.$proc$./macc.v:40$17'.
  created $dff cell `$procdff$121' with positive edge clock.
Creating register for signal `\macc.\o_RESULT' using process `\macc.$proc$./macc.v:13$12'.
  created $dff cell `$procdff$122' with positive edge clock.
Creating register for signal `\macc.\r_MUL_RESULT' using process `\macc.$proc$./macc.v:13$12'.
  created $dff cell `$procdff$123' with positive edge clock.
Creating register for signal `\macc.\r_SUM_RESULT' using process `\macc.$proc$./macc.v:13$12'.
  created $dff cell `$procdff$124' with positive edge clock.

2.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `macc.$proc$./macc.v:0$63'.
Removing empty process `macc.$proc$./macc.v:0$61'.
Removing empty process `macc.$proc$./macc.v:0$59'.
Removing empty process `macc.$proc$./macc.v:0$57'.
Removing empty process `macc.$proc$./macc.v:0$55'.
Removing empty process `macc.$proc$./macc.v:0$54'.
Removing empty process `macc.$proc$./macc.v:33$53'.
Found and cleaned up 2 empty switches in `\macc.$proc$./macc.v:40$17'.
Removing empty process `macc.$proc$./macc.v:40$17'.
Found and cleaned up 2 empty switches in `\macc.$proc$./macc.v:13$12'.
Removing empty process `macc.$proc$./macc.v:13$12'.
Cleaned up 4 empty switches.

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module macc.
<suppressed ~5 debug messages>

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \macc..
Removed 0 unused cells and 46 unused wires.
<suppressed ~1 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
checking module macc..
found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module macc.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\macc'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \macc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \macc.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\macc'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

2.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \macc..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

2.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module macc.

2.7.8. Rerunning OPT passes. (Maybe there is more to do..)

2.7.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \macc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

2.7.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \macc.
Performed a total of 0 changes.

2.7.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\macc'.
Removed a total of 0 cells.

2.7.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \macc..

2.7.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module macc.

2.7.14. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell macc.$and$./macc.v:0$35 ($and).
Removed top 31 bits (of 32) from port Y of cell macc.$and$./macc.v:0$35 ($and).
Removed top 31 bits (of 32) from port B of cell macc.$and$./macc.v:0$37 ($and).
Removed top 31 bits (of 32) from port Y of cell macc.$and$./macc.v:0$37 ($and).
Removed top 7 bits (of 8) from port B of cell macc.$or$./macc.v:47$43 ($or).
Removed top 31 bits (of 32) from wire macc.$and$./macc.v:0$35_Y.
Removed top 31 bits (of 32) from wire macc.$and$./macc.v:0$37_Y.
Removed top 7 bits (of 8) from wire macc.$eq$./macc.v:47$42_Y.

2.9. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \macc..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.11. Executing MEMORY_COLLECT pass (generating $mem cells).

2.12. Executing OPT pass (performing simple optimizations).

2.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module macc.
<suppressed ~2 debug messages>

2.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\macc'.
Removed a total of 0 cells.

2.12.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \macc..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.12.4. Finished fast OPT passes.

2.13. Printing statistics.

=== macc ===

   Number of wires:                 45
   Number of wire bits:            134
   Number of public wires:           9
   Number of public wire bits:      36
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 45
     $add                            1
     $assert                         1
     $assume                         4
     $dff                           16
     $eq                             3
     $logic_and                      2
     $logic_not                      2
     $mul                            1
     $mux                           12
     $ne                             1
     $or                             1
     $reduce_bool                    1

2.14. Executing CHECK pass (checking for obvious problems).
checking module macc..
found and reported 0 problems.

3. Executing MEMORY_NORDFF pass (extracting $dff cells from $mem).

4. Executing ASYNC2SYNC pass.

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \macc..
Removed 5 unused cells and 4 unused wires.
<suppressed ~6 debug messages>

6. Executing SETUNDEF pass (replace undef values with defined constants).

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module macc.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\macc'.
Removed a total of 0 cells.

7.3. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec $formal$./macc.v:50$9_EN = 1'0 to constant driver in module macc.
Promoted 1 init specs to constant drivers.

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \macc..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

7.5. Rerunning OPT passes. (Removed registers in this run.)

7.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module macc.

7.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\macc'.
Removed a total of 0 cells.

7.8. Executing OPT_RMDFF pass (remove dff with constant values).

7.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \macc..

7.10. Finished fast OPT passes.

8. Executing CHECK pass (checking for obvious problems).
checking module macc..
found and reported 0 problems.

9. Executing HIERARCHY pass (managing design hierarchy).

9.1. Analyzing design hierarchy..
Top module:  \macc

9.2. Analyzing design hierarchy..
Top module:  \macc
Removed 0 unused modules.
Module macc directly or indirectly contains formal properties -> setting "keep" attribute.

10. Executing ILANG backend.
Output filename: ../model/design.il

End of script. Logfile hash: 67b3764409, CPU: user 0.07s system 0.00s, MEM: 13.61 MB peak
Yosys 0.9+2406 (git sha1 a1785e988b, g++ 9.3.0 -fPIC -Os)
Time spent: 28% 8x opt_clean (0 sec), 13% 3x check (0 sec), ...
