
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+1706 (git sha1 2e8d6ec0b0, g++ 9.2.0 -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: ./uart_receiver.v
Parsing formal SystemVerilog input from `./uart_receiver.v' to AST representation.
Storing AST representation for module `$abstract\uart_receiver'.
Successfully finished Verilog frontend.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\uart_receiver'.
Generating RTLIL representation for module `\uart_receiver'.

2.2.1. Analyzing design hierarchy..
Top module:  \uart_receiver

2.2.2. Analyzing design hierarchy..
Top module:  \uart_receiver
Removing unused module `$abstract\uart_receiver'.
Removed 1 unused modules.
Module uart_receiver directly or indirectly contains formal properties -> setting "keep" attribute.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$./uart_receiver.v:26$27 in module uart_receiver.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 36 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\uart_receiver.$proc$./uart_receiver.v:124$170'.
  Set init value: $formal$./uart_receiver.v:124$26_EN = 1'0
Found init rule in `\uart_receiver.$proc$./uart_receiver.v:122$168'.
  Set init value: $formal$./uart_receiver.v:122$25_EN = 1'0
Found init rule in `\uart_receiver.$proc$./uart_receiver.v:120$166'.
  Set init value: $formal$./uart_receiver.v:120$24_EN = 1'0
Found init rule in `\uart_receiver.$proc$./uart_receiver.v:118$164'.
  Set init value: $formal$./uart_receiver.v:118$23_EN = 1'0
Found init rule in `\uart_receiver.$proc$./uart_receiver.v:116$162'.
  Set init value: $formal$./uart_receiver.v:116$22_EN = 1'0
Found init rule in `\uart_receiver.$proc$./uart_receiver.v:111$160'.
  Set init value: $formal$./uart_receiver.v:111$21_EN = 1'0
Found init rule in `\uart_receiver.$proc$./uart_receiver.v:110$158'.
  Set init value: $formal$./uart_receiver.v:110$20_EN = 1'0
Found init rule in `\uart_receiver.$proc$./uart_receiver.v:109$156'.
  Set init value: $formal$./uart_receiver.v:109$19_EN = 1'0
Found init rule in `\uart_receiver.$proc$./uart_receiver.v:105$154'.
  Set init value: $formal$./uart_receiver.v:105$18_EN = 1'0
Found init rule in `\uart_receiver.$proc$./uart_receiver.v:104$152'.
  Set init value: $formal$./uart_receiver.v:104$17_EN = 1'0
Found init rule in `\uart_receiver.$proc$./uart_receiver.v:102$150'.
  Set init value: $formal$./uart_receiver.v:102$16_EN = 1'0
Found init rule in `\uart_receiver.$proc$./uart_receiver.v:98$148'.
  Set init value: $formal$./uart_receiver.v:98$15_EN = 1'0
Found init rule in `\uart_receiver.$proc$./uart_receiver.v:97$146'.
  Set init value: $formal$./uart_receiver.v:97$14_EN = 1'0
Found init rule in `\uart_receiver.$proc$./uart_receiver.v:96$144'.
  Set init value: $formal$./uart_receiver.v:96$13_EN = 1'0
Found init rule in `\uart_receiver.$proc$./uart_receiver.v:93$142'.
  Set init value: $formal$./uart_receiver.v:93$12_EN = 1'0
Found init rule in `\uart_receiver.$proc$./uart_receiver.v:92$140'.
  Set init value: $formal$./uart_receiver.v:92$11_EN = 1'0
Found init rule in `\uart_receiver.$proc$./uart_receiver.v:88$138'.
  Set init value: $formal$./uart_receiver.v:88$10_EN = 1'0
Found init rule in `\uart_receiver.$proc$./uart_receiver.v:85$137'.
  Set init value: \r_PAST_VALID = 1'0
Found init rule in `\uart_receiver.$proc$./uart_receiver.v:20$136'.
  Set init value: \r_CURRENT_STATE = 2'00
  Set init value: \r_NEXT_STATE = 2'00
  Set init value: \r_BIT_COUNT = 4'0000
  Set init value: \r_DATA_REG = 8'00000000

2.3.5. Executing PROC_ARST pass (detect async resets in processes).

2.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\uart_receiver.$proc$./uart_receiver.v:124$170'.
Creating decoders for process `\uart_receiver.$proc$./uart_receiver.v:122$168'.
Creating decoders for process `\uart_receiver.$proc$./uart_receiver.v:120$166'.
Creating decoders for process `\uart_receiver.$proc$./uart_receiver.v:118$164'.
Creating decoders for process `\uart_receiver.$proc$./uart_receiver.v:116$162'.
Creating decoders for process `\uart_receiver.$proc$./uart_receiver.v:111$160'.
Creating decoders for process `\uart_receiver.$proc$./uart_receiver.v:110$158'.
Creating decoders for process `\uart_receiver.$proc$./uart_receiver.v:109$156'.
Creating decoders for process `\uart_receiver.$proc$./uart_receiver.v:105$154'.
Creating decoders for process `\uart_receiver.$proc$./uart_receiver.v:104$152'.
Creating decoders for process `\uart_receiver.$proc$./uart_receiver.v:102$150'.
Creating decoders for process `\uart_receiver.$proc$./uart_receiver.v:98$148'.
Creating decoders for process `\uart_receiver.$proc$./uart_receiver.v:97$146'.
Creating decoders for process `\uart_receiver.$proc$./uart_receiver.v:96$144'.
Creating decoders for process `\uart_receiver.$proc$./uart_receiver.v:93$142'.
Creating decoders for process `\uart_receiver.$proc$./uart_receiver.v:92$140'.
Creating decoders for process `\uart_receiver.$proc$./uart_receiver.v:88$138'.
Creating decoders for process `\uart_receiver.$proc$./uart_receiver.v:85$137'.
Creating decoders for process `\uart_receiver.$proc$./uart_receiver.v:20$136'.
Creating decoders for process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
     1/32: $0$formal$./uart_receiver.v:92$11_EN[0:0]$47
     2/32: $0$formal$./uart_receiver.v:92$11_CHECK[0:0]$46
     3/32: $0$formal$./uart_receiver.v:93$12_EN[0:0]$49
     4/32: $0$formal$./uart_receiver.v:93$12_CHECK[0:0]$48
     5/32: $0$formal$./uart_receiver.v:96$13_EN[0:0]$51
     6/32: $0$formal$./uart_receiver.v:96$13_CHECK[0:0]$50
     7/32: $0$formal$./uart_receiver.v:97$14_EN[0:0]$53
     8/32: $0$formal$./uart_receiver.v:97$14_CHECK[0:0]$52
     9/32: $0$formal$./uart_receiver.v:98$15_EN[0:0]$55
    10/32: $0$formal$./uart_receiver.v:98$15_CHECK[0:0]$54
    11/32: $0$formal$./uart_receiver.v:102$16_EN[0:0]$57
    12/32: $0$formal$./uart_receiver.v:102$16_CHECK[0:0]$56
    13/32: $0$formal$./uart_receiver.v:104$17_EN[0:0]$59
    14/32: $0$formal$./uart_receiver.v:104$17_CHECK[0:0]$58
    15/32: $0$formal$./uart_receiver.v:105$18_EN[0:0]$61
    16/32: $0$formal$./uart_receiver.v:105$18_CHECK[0:0]$60
    17/32: $0$formal$./uart_receiver.v:109$19_EN[0:0]$63
    18/32: $0$formal$./uart_receiver.v:109$19_CHECK[0:0]$62
    19/32: $0$formal$./uart_receiver.v:110$20_EN[0:0]$65
    20/32: $0$formal$./uart_receiver.v:110$20_CHECK[0:0]$64
    21/32: $0$formal$./uart_receiver.v:111$21_EN[0:0]$67
    22/32: $0$formal$./uart_receiver.v:111$21_CHECK[0:0]$66
    23/32: $0$formal$./uart_receiver.v:116$22_EN[0:0]$69
    24/32: $0$formal$./uart_receiver.v:116$22_CHECK[0:0]$68
    25/32: $0$formal$./uart_receiver.v:118$23_EN[0:0]$71
    26/32: $0$formal$./uart_receiver.v:118$23_CHECK[0:0]$70
    27/32: $0$formal$./uart_receiver.v:120$24_EN[0:0]$73
    28/32: $0$formal$./uart_receiver.v:120$24_CHECK[0:0]$72
    29/32: $0$formal$./uart_receiver.v:122$25_EN[0:0]$75
    30/32: $0$formal$./uart_receiver.v:122$25_CHECK[0:0]$74
    31/32: $0$formal$./uart_receiver.v:124$26_EN[0:0]$77
    32/32: $0$formal$./uart_receiver.v:124$26_CHECK[0:0]$76
Creating decoders for process `\uart_receiver.$proc$./uart_receiver.v:55$31'.
     1/4: $0\r_DATA_REG[7:0]
     2/4: $0\r_BIT_COUNT[3:0]
     3/4: $0\o_DATA[7:0]
     4/4: $0\o_RX_DONE[0:0]
Creating decoders for process `\uart_receiver.$proc$./uart_receiver.v:50$30'.
Creating decoders for process `\uart_receiver.$proc$./uart_receiver.v:26$27'.
     1/3: $3\r_NEXT_STATE[1:0]
     2/3: $2\r_NEXT_STATE[1:0]
     3/3: $1\r_NEXT_STATE[1:0]

2.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `\uart_receiver.\r_NEXT_STATE' from process `\uart_receiver.$proc$./uart_receiver.v:26$27': $auto$proc_dlatch.cc:417:proc_dlatch$350

2.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\uart_receiver.\r_PAST_VALID' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$351' with positive edge clock.
Creating register for signal `\uart_receiver.$past$./uart_receiver.v:88$1$0' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$352' with positive edge clock.
Creating register for signal `\uart_receiver.$past$./uart_receiver.v:90$2$0' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$353' with positive edge clock.
Creating register for signal `\uart_receiver.$past$./uart_receiver.v:92$3$0' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$354' with positive edge clock.
Creating register for signal `\uart_receiver.$past$./uart_receiver.v:93$4$0' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$355' with positive edge clock.
Creating register for signal `\uart_receiver.$past$./uart_receiver.v:94$5$0' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$356' with positive edge clock.
Creating register for signal `\uart_receiver.$past$./uart_receiver.v:100$6$0' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$357' with positive edge clock.
Creating register for signal `\uart_receiver.$past$./uart_receiver.v:105$7$0' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$358' with positive edge clock.
Creating register for signal `\uart_receiver.$past$./uart_receiver.v:107$8$0' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$359' with positive edge clock.
Creating register for signal `\uart_receiver.$past$./uart_receiver.v:109$9$0' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$360' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:88$10_CHECK' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$361' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:88$10_EN' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$362' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:92$11_CHECK' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$363' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:92$11_EN' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$364' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:93$12_CHECK' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$365' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:93$12_EN' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$366' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:96$13_CHECK' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$367' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:96$13_EN' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$368' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:97$14_CHECK' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$369' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:97$14_EN' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$370' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:98$15_CHECK' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$371' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:98$15_EN' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$372' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:102$16_CHECK' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$373' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:102$16_EN' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$374' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:104$17_CHECK' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$375' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:104$17_EN' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$376' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:105$18_CHECK' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$377' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:105$18_EN' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$378' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:109$19_CHECK' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$379' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:109$19_EN' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$380' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:110$20_CHECK' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$381' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:110$20_EN' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$382' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:111$21_CHECK' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$383' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:111$21_EN' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$384' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:116$22_CHECK' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$385' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:116$22_EN' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$386' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:118$23_CHECK' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$387' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:118$23_EN' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$388' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:120$24_CHECK' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$389' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:120$24_EN' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$390' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:122$25_CHECK' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$391' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:122$25_EN' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$392' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:124$26_CHECK' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$393' with positive edge clock.
Creating register for signal `\uart_receiver.$formal$./uart_receiver.v:124$26_EN' using process `\uart_receiver.$proc$./uart_receiver.v:86$34'.
  created $dff cell `$procdff$394' with positive edge clock.
Creating register for signal `\uart_receiver.\o_RX_DONE' using process `\uart_receiver.$proc$./uart_receiver.v:55$31'.
  created $dff cell `$procdff$395' with positive edge clock.
Creating register for signal `\uart_receiver.\o_DATA' using process `\uart_receiver.$proc$./uart_receiver.v:55$31'.
  created $dff cell `$procdff$396' with positive edge clock.
Creating register for signal `\uart_receiver.\r_BIT_COUNT' using process `\uart_receiver.$proc$./uart_receiver.v:55$31'.
  created $dff cell `$procdff$397' with positive edge clock.
Creating register for signal `\uart_receiver.\r_DATA_REG' using process `\uart_receiver.$proc$./uart_receiver.v:55$31'.
  created $dff cell `$procdff$398' with positive edge clock.
Creating register for signal `\uart_receiver.\r_CURRENT_STATE' using process `\uart_receiver.$proc$./uart_receiver.v:50$30'.
  created $dff cell `$procdff$399' with positive edge clock.

2.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `uart_receiver.$proc$./uart_receiver.v:124$170'.
Removing empty process `uart_receiver.$proc$./uart_receiver.v:122$168'.
Removing empty process `uart_receiver.$proc$./uart_receiver.v:120$166'.
Removing empty process `uart_receiver.$proc$./uart_receiver.v:118$164'.
Removing empty process `uart_receiver.$proc$./uart_receiver.v:116$162'.
Removing empty process `uart_receiver.$proc$./uart_receiver.v:111$160'.
Removing empty process `uart_receiver.$proc$./uart_receiver.v:110$158'.
Removing empty process `uart_receiver.$proc$./uart_receiver.v:109$156'.
Removing empty process `uart_receiver.$proc$./uart_receiver.v:105$154'.
Removing empty process `uart_receiver.$proc$./uart_receiver.v:104$152'.
Removing empty process `uart_receiver.$proc$./uart_receiver.v:102$150'.
Removing empty process `uart_receiver.$proc$./uart_receiver.v:98$148'.
Removing empty process `uart_receiver.$proc$./uart_receiver.v:97$146'.
Removing empty process `uart_receiver.$proc$./uart_receiver.v:96$144'.
Removing empty process `uart_receiver.$proc$./uart_receiver.v:93$142'.
Removing empty process `uart_receiver.$proc$./uart_receiver.v:92$140'.
Removing empty process `uart_receiver.$proc$./uart_receiver.v:88$138'.
Removing empty process `uart_receiver.$proc$./uart_receiver.v:85$137'.
Removing empty process `uart_receiver.$proc$./uart_receiver.v:20$136'.
Found and cleaned up 9 empty switches in `\uart_receiver.$proc$./uart_receiver.v:86$34'.
Removing empty process `uart_receiver.$proc$./uart_receiver.v:86$34'.
Found and cleaned up 1 empty switch in `\uart_receiver.$proc$./uart_receiver.v:55$31'.
Removing empty process `uart_receiver.$proc$./uart_receiver.v:55$31'.
Removing empty process `uart_receiver.$proc$./uart_receiver.v:50$30'.
Found and cleaned up 3 empty switches in `\uart_receiver.$proc$./uart_receiver.v:26$27'.
Removing empty process `uart_receiver.$proc$./uart_receiver.v:26$27'.
Cleaned up 13 empty switches.

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_receiver.
<suppressed ~31 debug messages>

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_receiver..
Removed 3 unused cells and 150 unused wires.
<suppressed ~4 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
checking module uart_receiver..
found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_receiver.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_receiver'.
<suppressed ~90 debug messages>
Removed a total of 30 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart_receiver..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~37 debug messages>

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart_receiver.
    New ctrl vector for $pmux cell $procmux$292: { $eq$./uart_receiver.v:119$109_Y $auto$opt_reduce.cc:134:opt_mux$401 }
    New ctrl vector for $pmux cell $procmux$296: { $eq$./uart_receiver.v:119$109_Y $auto$opt_reduce.cc:134:opt_mux$403 }
    New ctrl vector for $pmux cell $procmux$300: { $auto$opt_reduce.cc:134:opt_mux$405 $eq$./uart_receiver.v:123$117_Y }
    New ctrl vector for $pmux cell $procmux$304: { $auto$opt_reduce.cc:134:opt_mux$407 $eq$./uart_receiver.v:123$117_Y }
    New ctrl vector for $pmux cell $procmux$324: { $eq$./uart_receiver.v:119$109_Y $eq$./uart_receiver.v:123$117_Y }
  Optimizing cells in module \uart_receiver.
Performed a total of 5 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_receiver'.
<suppressed ~66 debug messages>
Removed a total of 22 cells.

2.7.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_receiver..
Removed 0 unused cells and 52 unused wires.
<suppressed ~1 debug messages>

2.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_receiver.

2.7.9. Rerunning OPT passes. (Maybe there is more to do..)

2.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart_receiver..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

2.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart_receiver.
Performed a total of 0 changes.

2.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_receiver'.
Removed a total of 0 cells.

2.7.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_receiver..

2.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_receiver.

2.7.16. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell uart_receiver.$and$./uart_receiver.v:90$79 ($and).
Removed top 31 bits (of 32) from port Y of cell uart_receiver.$and$./uart_receiver.v:90$79 ($and).
Removed top 31 bits (of 32) from port B of cell uart_receiver.$and$./uart_receiver.v:90$81 ($and).
Removed top 31 bits (of 32) from port Y of cell uart_receiver.$and$./uart_receiver.v:90$81 ($and).
Removed top 1 bits (of 2) from port B of cell uart_receiver.$eq$./uart_receiver.v:100$92 ($eq).
Removed top 31 bits (of 32) from port B of cell uart_receiver.$add$./uart_receiver.v:105$95 ($add).
Removed top 27 bits (of 32) from port Y of cell uart_receiver.$add$./uart_receiver.v:105$95 ($add).
Removed top 27 bits (of 32) from port B of cell uart_receiver.$eq$./uart_receiver.v:105$96 ($eq).
Removed top 1 bits (of 2) from port B of cell uart_receiver.$eq$./uart_receiver.v:116$104 ($eq).
Removed top 1 bits (of 2) from port B of cell uart_receiver.$eq$./uart_receiver.v:119$109 ($eq).
Removed top 1 bits (of 4) from port B of cell uart_receiver.$ne$./uart_receiver.v:119$110 ($ne).
Removed top 1 bits (of 4) from port B of cell uart_receiver.$eq$./uart_receiver.v:121$114 ($eq).
Removed top 1 bits (of 2) from mux cell uart_receiver.$procmux$319 ($mux).
Removed top 1 bits (of 2) from wire uart_receiver.$2\r_NEXT_STATE[1:0].
Removed top 27 bits (of 32) from wire uart_receiver.$add$./uart_receiver.v:105$95_Y.
Removed top 31 bits (of 32) from wire uart_receiver.$and$./uart_receiver.v:90$79_Y.
Removed top 31 bits (of 32) from wire uart_receiver.$and$./uart_receiver.v:90$81_Y.

2.9. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_receiver..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

2.11. Executing MEMORY_COLLECT pass (generating $mem cells).

2.12. Executing OPT pass (performing simple optimizations).

2.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_receiver.
<suppressed ~2 debug messages>

2.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_receiver'.
Removed a total of 0 cells.

2.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_receiver..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.12.5. Finished fast OPT passes.

2.13. Printing statistics.

=== uart_receiver ===

   Number of wires:                131
   Number of wire bits:            187
   Number of public wires:           9
   Number of public wire bits:      28
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                146
     $add                            2
     $and                            2
     $assert                        14
     $assume                         2
     $cover                          1
     $dff                           37
     $dlatch                         1
     $eq                             9
     $logic_and                      7
     $logic_not                      6
     $mux                           49
     $ne                             3
     $not                            6
     $pmux                           5
     $reduce_or                      2

2.14. Executing CHECK pass (checking for obvious problems).
checking module uart_receiver..
found and reported 0 problems.

3. Executing MEMORY_NORDFF pass (extracting $dff cells from $mem).

4. Executing ASYNC2SYNC pass.
Replacing uart_receiver.$auto$proc_dlatch.cc:417:proc_dlatch$350 ($dlatch): EN=$auto$rtlil.cc:1863:Not$349, D=$0\r_NEXT_STATE[1:0], Q=\r_NEXT_STATE

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_receiver..
Removed 6 unused cells and 5 unused wires.
<suppressed ~7 debug messages>

6. Executing SETUNDEF pass (replace undef values with defined constants).

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_receiver.
<suppressed ~1 debug messages>

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_receiver'.
Removed a total of 0 cells.

7.3. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec $formal$./uart_receiver.v:92$11_EN = 1'0 to constant driver in module uart_receiver.
Promoted 1 init specs to constant drivers.

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_receiver..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

7.5. Rerunning OPT passes. (Removed registers in this run.)

7.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_receiver.

7.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_receiver'.
Removed a total of 0 cells.

7.8. Executing OPT_RMDFF pass (remove dff with constant values).

7.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_receiver..

7.10. Finished fast OPT passes.

8. Executing CHECK pass (checking for obvious problems).
checking module uart_receiver..
found and reported 0 problems.

9. Executing HIERARCHY pass (managing design hierarchy).

9.1. Analyzing design hierarchy..
Top module:  \uart_receiver

9.2. Analyzing design hierarchy..
Top module:  \uart_receiver
Removed 0 unused modules.
Module uart_receiver directly or indirectly contains formal properties -> setting "keep" attribute.

10. Executing ILANG backend.
Output filename: ../model/design.il

End of script. Logfile hash: 3c129faffc, CPU: user 0.17s system 0.01s, MEM: 13.65 MB peak
Yosys 0.9+1706 (git sha1 2e8d6ec0b0, g++ 9.2.0 -fPIC -Os)
Time spent: 23% 7x opt_expr (0 sec), 22% 8x opt_clean (0 sec), ...
