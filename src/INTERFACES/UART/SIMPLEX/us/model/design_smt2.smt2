; SMT-LIBv2 description generated by Yosys 0.9 (git sha1 UNKNOWN, clang 9.0.0 -march=x86-64 -mtune=generic -O2 -fno-plt -fPIC -Os)
; yosys-smt2-module uart_simplex
(declare-sort |uart_simplex_s| 0)
(declare-fun |uart_simplex_is| (|uart_simplex_s|) Bool)
; yosys-smt2-register r_TX_REG 9
; yosys-smt2-wire r_TX_REG 9
(declare-fun |uart_simplex#0| (|uart_simplex_s|) (_ BitVec 9)) ; \r_TX_REG
(define-fun |uart_simplex_n r_TX_REG| ((state |uart_simplex_s|)) (_ BitVec 9) (|uart_simplex#0| state))
; yosys-smt2-register r_PAST_VALID 1
; yosys-smt2-wire r_PAST_VALID 1
(declare-fun |uart_simplex#1| (|uart_simplex_s|) (_ BitVec 1)) ; \r_PAST_VALID
(define-fun |uart_simplex_n r_PAST_VALID| ((state |uart_simplex_s|)) Bool (= ((_ extract 0 0) (|uart_simplex#1| state)) #b1))
; yosys-smt2-wire r_NEXT_STATE 1
; yosys-smt2-anyseq uart_simplex#2 1 $auto$setundef.cc:524:execute$132
(declare-fun |uart_simplex#2| (|uart_simplex_s|) (_ BitVec 1)) ; $auto$rtlil.cc:2305:Anyseq$133
(declare-fun |uart_simplex#3| (|uart_simplex_s|) (_ BitVec 4)) ; \r_BIT_COUNT
(define-fun |uart_simplex#4| ((state |uart_simplex_s|)) Bool (= (|uart_simplex#3| state) #b0111)) ; $eq$./uart_simplex.v:31$14_Y
(define-fun |uart_simplex#5| ((state |uart_simplex_s|)) (_ BitVec 1) (ite (|uart_simplex#4| state) #b0 #b1)) ; $3\r_NEXT_STATE[0:0]
(declare-fun |uart_simplex#6| (|uart_simplex_s|) (_ BitVec 1)) ; \i_TX_ENABLE
(define-fun |uart_simplex#7| ((state |uart_simplex_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|uart_simplex#6| state)) #b1) #b1 #b0)) ; $2\r_NEXT_STATE[0:0]
(declare-fun |uart_simplex#8| (|uart_simplex_s|) (_ BitVec 1)) ; \r_CURRENT_STATE
(define-fun |uart_simplex#9| ((state |uart_simplex_s|)) (_ BitVec 1) (bvnot (|uart_simplex#8| state))) ; $eq$./uart_simplex.v:70$41_Y
(define-fun |uart_simplex#10| ((state |uart_simplex_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|uart_simplex#9| state)) #b1) (|uart_simplex#7| state) (ite (= ((_ extract 0 0) (|uart_simplex#8| state)) #b1) (|uart_simplex#5| state) (|uart_simplex#2| state)))) ; \r_NEXT_STATE
(define-fun |uart_simplex_n r_NEXT_STATE| ((state |uart_simplex_s|)) Bool (= ((_ extract 0 0) (|uart_simplex#10| state)) #b1))
; yosys-smt2-register r_CURRENT_STATE 1
; yosys-smt2-wire r_CURRENT_STATE 1
(define-fun |uart_simplex_n r_CURRENT_STATE| ((state |uart_simplex_s|)) Bool (= ((_ extract 0 0) (|uart_simplex#8| state)) #b1))
; yosys-smt2-register r_BIT_COUNT 4
; yosys-smt2-wire r_BIT_COUNT 4
(define-fun |uart_simplex_n r_BIT_COUNT| ((state |uart_simplex_s|)) (_ BitVec 4) (|uart_simplex#3| state))
; yosys-smt2-output o_TX 1
; yosys-smt2-wire o_TX 1
; yosys-smt2-anyseq uart_simplex#11 1 $auto$setundef.cc:524:execute$134
(declare-fun |uart_simplex#11| (|uart_simplex_s|) (_ BitVec 1)) ; $auto$rtlil.cc:2305:Anyseq$135
(define-fun |uart_simplex#12| ((state |uart_simplex_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|uart_simplex#9| state)) #b1) #b1 (ite (= ((_ extract 0 0) (|uart_simplex#8| state)) #b1) ((_ extract 0 0) (|uart_simplex#0| state)) (|uart_simplex#11| state)))) ; \o_TX
(define-fun |uart_simplex_n o_TX| ((state |uart_simplex_s|)) Bool (= ((_ extract 0 0) (|uart_simplex#12| state)) #b1))
; yosys-smt2-input i_TX_ENABLE 1
; yosys-smt2-wire i_TX_ENABLE 1
(define-fun |uart_simplex_n i_TX_ENABLE| ((state |uart_simplex_s|)) Bool (= ((_ extract 0 0) (|uart_simplex#6| state)) #b1))
; yosys-smt2-input i_DATA_IN 8
; yosys-smt2-wire i_DATA_IN 8
(declare-fun |uart_simplex#13| (|uart_simplex_s|) (_ BitVec 8)) ; \i_DATA_IN
(define-fun |uart_simplex_n i_DATA_IN| ((state |uart_simplex_s|)) (_ BitVec 8) (|uart_simplex#13| state))
; yosys-smt2-input i_CLK 1
; yosys-smt2-wire i_CLK 1
(declare-fun |uart_simplex#14| (|uart_simplex_s|) Bool) ; \i_CLK
(define-fun |uart_simplex_n i_CLK| ((state |uart_simplex_s|)) Bool (|uart_simplex#14| state))
; yosys-smt2-register $formal$./uart_simplex.v:73$11_EN 1
(declare-fun |uart_simplex#15| (|uart_simplex_s|) (_ BitVec 1)) ; $formal$./uart_simplex.v:73$11_EN
(define-fun |uart_simplex_n $formal$./uart_simplex.v:73$11_EN| ((state |uart_simplex_s|)) Bool (= ((_ extract 0 0) (|uart_simplex#15| state)) #b1))
; yosys-smt2-register $formal$./uart_simplex.v:73$11_CHECK 1
(declare-fun |uart_simplex#16| (|uart_simplex_s|) (_ BitVec 1)) ; $formal$./uart_simplex.v:73$11_CHECK
(define-fun |uart_simplex_n $formal$./uart_simplex.v:73$11_CHECK| ((state |uart_simplex_s|)) Bool (= ((_ extract 0 0) (|uart_simplex#16| state)) #b1))
; yosys-smt2-register $formal$./uart_simplex.v:70$10_EN 1
(declare-fun |uart_simplex#17| (|uart_simplex_s|) (_ BitVec 1)) ; $formal$./uart_simplex.v:70$10_EN
(define-fun |uart_simplex_n $formal$./uart_simplex.v:70$10_EN| ((state |uart_simplex_s|)) Bool (= ((_ extract 0 0) (|uart_simplex#17| state)) #b1))
; yosys-smt2-register $formal$./uart_simplex.v:70$10_CHECK 1
(declare-fun |uart_simplex#18| (|uart_simplex_s|) (_ BitVec 1)) ; $formal$./uart_simplex.v:70$10_CHECK
(define-fun |uart_simplex_n $formal$./uart_simplex.v:70$10_CHECK| ((state |uart_simplex_s|)) Bool (= ((_ extract 0 0) (|uart_simplex#18| state)) #b1))
; yosys-smt2-register $eq$./uart_simplex.v:70$40_Y 1
(declare-fun |uart_simplex#19| (|uart_simplex_s|) (_ BitVec 1)) ; $eq$./uart_simplex.v:70$40_Y
(define-fun |uart_simplex_n $eq$./uart_simplex.v:70$40_Y| ((state |uart_simplex_s|)) Bool (= ((_ extract 0 0) (|uart_simplex#19| state)) #b1))
; yosys-smt2-register $and$./uart_simplex.v:68$35_Y 1
(declare-fun |uart_simplex#20| (|uart_simplex_s|) (_ BitVec 1)) ; $and$./uart_simplex.v:68$35_Y
(define-fun |uart_simplex_n $and$./uart_simplex.v:68$35_Y| ((state |uart_simplex_s|)) Bool (= ((_ extract 0 0) (|uart_simplex#20| state)) #b1))
; yosys-smt2-cover 0 ./uart_simplex.v:70
(define-fun |uart_simplex_c 0| ((state |uart_simplex_s|)) Bool (and (= ((_ extract 0 0) (|uart_simplex#18| state)) #b1) (= ((_ extract 0 0) (|uart_simplex#17| state)) #b1))) ; $cover$./uart_simplex.v:70$49
(define-fun |uart_simplex#21| ((state |uart_simplex_s|)) Bool (= (|uart_simplex#13| state) #b00101010)) ; $0$formal$./uart_simplex.v:67$9_CHECK[0:0]$26
; yosys-smt2-assume 0 ./uart_simplex.v:67
(define-fun |uart_simplex_u 0| ((state |uart_simplex_s|)) Bool (or (|uart_simplex#21| state) (not true))) ; $assume$./uart_simplex.v:67$48
(define-fun |uart_simplex#22| ((state |uart_simplex_s|)) Bool (distinct (|uart_simplex#20| state) (ite (|uart_simplex#14| state) #b1 #b0))) ; $0$formal$./uart_simplex.v:66$8_CHECK[0:0]$24
; yosys-smt2-assume 1 ./uart_simplex.v:66
(define-fun |uart_simplex_u 1| ((state |uart_simplex_s|)) Bool (or (|uart_simplex#22| state) (not true))) ; $assume$./uart_simplex.v:66$47
(define-fun |uart_simplex#23| ((state |uart_simplex_s|)) (_ BitVec 1) (bvnot (|uart_simplex#6| state))) ; $0$formal$./uart_simplex.v:61$6_CHECK[0:0]$56
(define-fun |uart_simplex#24| ((state |uart_simplex_s|)) Bool (|uart_simplex_is| state)) ; $0$formal$./uart_simplex.v:61$6_EN[0:0]$57
; yosys-smt2-assume 2 ./uart_simplex.v:61
(define-fun |uart_simplex_u 2| ((state |uart_simplex_s|)) Bool (or (= ((_ extract 0 0) (|uart_simplex#23| state)) #b1) (not (|uart_simplex#24| state)))) ; $assume$./uart_simplex.v:61$46
; yosys-smt2-assert 0 ./uart_simplex.v:73
(define-fun |uart_simplex_a 0| ((state |uart_simplex_s|)) Bool (or (= ((_ extract 0 0) (|uart_simplex#16| state)) #b1) (not (= ((_ extract 0 0) (|uart_simplex#15| state)) #b1)))) ; $assert$./uart_simplex.v:73$50
; yosys-smt2-anyseq uart_simplex#25 1 $auto$setundef.cc:524:execute$122
(declare-fun |uart_simplex#25| (|uart_simplex_s|) (_ BitVec 1)) ; $auto$rtlil.cc:2305:Anyseq$123
(define-fun |uart_simplex#26| ((state |uart_simplex_s|)) Bool (and (or  (= ((_ extract 0 0) (|uart_simplex#19| state)) #b1) false) (or  (= ((_ extract 0 0) (|uart_simplex#9| state)) #b1) false))) ; $logic_and$./uart_simplex.v:70$42_Y
(define-fun |uart_simplex#27| ((state |uart_simplex_s|)) Bool (not (or  (= ((_ extract 0 0) (|uart_simplex#20| state)) #b1) false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false))) ; $logic_not$./uart_simplex.v:68$36_Y
(define-fun |uart_simplex#28| ((state |uart_simplex_s|)) Bool (and (or  (|uart_simplex#27| state) false) (or  (|uart_simplex#14| state) false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false false))) ; $logic_and$./uart_simplex.v:68$38_Y
(define-fun |uart_simplex#29| ((state |uart_simplex_s|)) Bool (and (or  (= ((_ extract 0 0) (|uart_simplex#1| state)) #b1) false) (or  (|uart_simplex#28| state) false))) ; $logic_and$./uart_simplex.v:68$39_Y
(define-fun |uart_simplex#30| ((state |uart_simplex_s|)) (_ BitVec 1) (ite (|uart_simplex#29| state) (ite (|uart_simplex#26| state) #b1 #b0) (|uart_simplex#25| state))) ; $0$formal$./uart_simplex.v:70$10_CHECK[0:0]$28
(define-fun |uart_simplex#31| ((state |uart_simplex_s|)) (_ BitVec 1) (ite (|uart_simplex#29| state) #b1 #b0)) ; $0$formal$./uart_simplex.v:70$10_EN[0:0]$29
; yosys-smt2-anyseq uart_simplex#32 1 $auto$setundef.cc:524:execute$126
(declare-fun |uart_simplex#32| (|uart_simplex_s|) (_ BitVec 1)) ; $auto$rtlil.cc:2305:Anyseq$127
(define-fun |uart_simplex#33| ((state |uart_simplex_s|)) Bool (not (or  (= ((_ extract 0 0) (|uart_simplex#3| state)) #b1) (= ((_ extract 1 1) (|uart_simplex#3| state)) #b1) (= ((_ extract 2 2) (|uart_simplex#3| state)) #b1) (= ((_ extract 3 3) (|uart_simplex#3| state)) #b1)))) ; $eq$./uart_simplex.v:73$44_Y
; yosys-smt2-anyseq uart_simplex#34 1 $auto$setundef.cc:524:execute$124
(declare-fun |uart_simplex#34| (|uart_simplex_s|) (_ BitVec 1)) ; $auto$rtlil.cc:2305:Anyseq$125
(define-fun |uart_simplex#35| ((state |uart_simplex_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|uart_simplex#19| state)) #b1) (|uart_simplex#34| state) (ite (|uart_simplex#33| state) #b1 #b0))) ; $procmux$75_Y
(define-fun |uart_simplex#36| ((state |uart_simplex_s|)) (_ BitVec 1) (ite (|uart_simplex#29| state) (|uart_simplex#35| state) (|uart_simplex#32| state))) ; $0$formal$./uart_simplex.v:73$11_CHECK[0:0]$30
(define-fun |uart_simplex#37| ((state |uart_simplex_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|uart_simplex#19| state)) #b1) #b0 #b1)) ; $procmux$71_Y
(define-fun |uart_simplex#38| ((state |uart_simplex_s|)) (_ BitVec 1) (ite (|uart_simplex#29| state) (|uart_simplex#37| state) #b0)) ; $0$formal$./uart_simplex.v:73$11_EN[0:0]$31
; yosys-smt2-anyseq uart_simplex#39 4 $auto$setundef.cc:524:execute$128
(declare-fun |uart_simplex#39| (|uart_simplex_s|) (_ BitVec 4)) ; $auto$rtlil.cc:2305:Anyseq$129
(define-fun |uart_simplex#40| ((state |uart_simplex_s|)) (_ BitVec 4) (bvadd (|uart_simplex#3| state) #b0001)) ; $add$./uart_simplex.v:51$16_Y
(define-fun |uart_simplex#41| ((state |uart_simplex_s|)) (_ BitVec 4) (ite (= ((_ extract 0 0) (|uart_simplex#9| state)) #b1) #b0000 (ite (= ((_ extract 0 0) (|uart_simplex#8| state)) #b1) (|uart_simplex#40| state) (|uart_simplex#39| state)))) ; $0\r_BIT_COUNT[3:0]
; yosys-smt2-anyseq uart_simplex#42 9 $auto$setundef.cc:524:execute$130
(declare-fun |uart_simplex#42| (|uart_simplex_s|) (_ BitVec 9)) ; $auto$rtlil.cc:2305:Anyseq$131
(define-fun |uart_simplex#43| ((state |uart_simplex_s|)) (_ BitVec 9) (ite (= ((_ extract 0 0) (|uart_simplex#9| state)) #b1) (concat (|uart_simplex#13| state) #b0) (ite (= ((_ extract 0 0) (|uart_simplex#8| state)) #b1) (concat #b0 ((_ extract 8 1) (|uart_simplex#0| state))) (|uart_simplex#42| state)))) ; $0\r_TX_REG[8:0]
(define-fun |uart_simplex_a| ((state |uart_simplex_s|)) Bool 
  (|uart_simplex_a 0| state)
)
(define-fun |uart_simplex_u| ((state |uart_simplex_s|)) Bool (and
  (|uart_simplex_u 0| state)
  (|uart_simplex_u 1| state)
  (|uart_simplex_u 2| state)
))
(define-fun |uart_simplex_i| ((state |uart_simplex_s|)) Bool (and
  (= (|uart_simplex#0| state) #b000000000) ; r_TX_REG
  (= (= ((_ extract 0 0) (|uart_simplex#1| state)) #b1) false) ; r_PAST_VALID
  (= (= ((_ extract 0 0) (|uart_simplex#8| state)) #b1) false) ; r_CURRENT_STATE
  (= (|uart_simplex#3| state) #b0000) ; r_BIT_COUNT
  (= (= ((_ extract 0 0) (|uart_simplex#15| state)) #b1) false) ; $formal$./uart_simplex.v:73$11_EN
  (= (= ((_ extract 0 0) (|uart_simplex#17| state)) #b1) false) ; $formal$./uart_simplex.v:70$10_EN
))
(define-fun |uart_simplex_h| ((state |uart_simplex_s|)) Bool true)
(define-fun |uart_simplex_t| ((state |uart_simplex_s|) (next_state |uart_simplex_s|)) Bool (and
  (= (ite (|uart_simplex#14| state) #b1 #b0) (|uart_simplex#20| next_state)) ; $procdff$103 $and$./uart_simplex.v:68$35_Y
  (= (|uart_simplex#8| state) (|uart_simplex#19| next_state)) ; $procdff$105 $eq$./uart_simplex.v:70$40_Y
  (= (|uart_simplex#30| state) (|uart_simplex#18| next_state)) ; $procdff$112 $formal$./uart_simplex.v:70$10_CHECK
  (= (|uart_simplex#31| state) (|uart_simplex#17| next_state)) ; $procdff$113 $formal$./uart_simplex.v:70$10_EN
  (= (|uart_simplex#36| state) (|uart_simplex#16| next_state)) ; $procdff$114 $formal$./uart_simplex.v:73$11_CHECK
  (= (|uart_simplex#38| state) (|uart_simplex#15| next_state)) ; $procdff$115 $formal$./uart_simplex.v:73$11_EN
  (= (|uart_simplex#10| state) (|uart_simplex#8| next_state)) ; $procdff$116 \r_CURRENT_STATE
  (= (|uart_simplex#41| state) (|uart_simplex#3| next_state)) ; $procdff$118 \r_BIT_COUNT
  (= #b1 (|uart_simplex#1| next_state)) ; $procdff$102 \r_PAST_VALID
  (= (|uart_simplex#43| state) (|uart_simplex#0| next_state)) ; $procdff$117 \r_TX_REG
)) ; end of module uart_simplex
; yosys-smt2-topmod uart_simplex
; end of yosys output
