
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 UNKNOWN, clang 9.0.0 -march=x86-64 -mtune=generic -O2 -fno-plt -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: ./uart_simplex.v
Parsing formal SystemVerilog input from `./uart_simplex.v' to AST representation.
Generating RTLIL representation for module `\uart_simplex'.
Successfully finished Verilog frontend.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \uart_simplex

2.1.2. Analyzing design hierarchy..
Top module:  \uart_simplex
Removed 0 unused modules.
Module uart_simplex directly or indirectly contains formal properties -> setting "keep" attribute.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\uart_simplex.$proc$./uart_simplex.v:63$18'.
Cleaned up 1 empty switch.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$./uart_simplex.v:40$15 in module uart_simplex.
Removed 1 dead cases from process $proc$./uart_simplex.v:17$12 in module uart_simplex.
Marked 3 switch rules as full_case in process $proc$./uart_simplex.v:17$12 in module uart_simplex.
Removed a total of 1 dead cases.

2.2.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\uart_simplex.$proc$./uart_simplex.v:73$65'.
  Set init value: $formal$./uart_simplex.v:73$11_EN = 1'0
Found init rule in `\uart_simplex.$proc$./uart_simplex.v:70$63'.
  Set init value: $formal$./uart_simplex.v:70$10_EN = 1'0
Found init rule in `\uart_simplex.$proc$./uart_simplex.v:67$61'.
  Set init value: $formal$./uart_simplex.v:67$9_EN = 1'0
Found init rule in `\uart_simplex.$proc$./uart_simplex.v:66$59'.
  Set init value: $formal$./uart_simplex.v:66$8_EN = 1'0
Found init rule in `\uart_simplex.$proc$./uart_simplex.v:59$54'.
  Set init value: \r_PAST_VALID = 1'0
Found init rule in `\uart_simplex.$proc$./uart_simplex.v:11$53'.
  Set init value: \r_CURRENT_STATE = 1'0
Found init rule in `\uart_simplex.$proc$./uart_simplex.v:9$52'.
  Set init value: \r_BIT_COUNT = 4'0000
Found init rule in `\uart_simplex.$proc$./uart_simplex.v:8$51'.
  Set init value: \r_TX_REG = 9'000000000

2.2.4. Executing PROC_ARST pass (detect async resets in processes).

2.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\uart_simplex.$proc$./uart_simplex.v:73$65'.
     1/1: $0$formal$./uart_simplex.v:73$11_EN[0:0]$66
Creating decoders for process `\uart_simplex.$proc$./uart_simplex.v:70$63'.
     1/1: $0$formal$./uart_simplex.v:70$10_EN[0:0]$64
Creating decoders for process `\uart_simplex.$proc$./uart_simplex.v:67$61'.
     1/1: $0$formal$./uart_simplex.v:67$9_EN[0:0]$62
Creating decoders for process `\uart_simplex.$proc$./uart_simplex.v:66$59'.
     1/1: $0$formal$./uart_simplex.v:66$8_EN[0:0]$60
Creating decoders for process `\uart_simplex.$proc$./uart_simplex.v:60$55'.
     1/2: $0$formal$./uart_simplex.v:61$6_EN[0:0]$57
     2/2: $0$formal$./uart_simplex.v:61$6_CHECK[0:0]$56
Creating decoders for process `\uart_simplex.$proc$./uart_simplex.v:59$54'.
     1/1: $1\r_PAST_VALID[0:0]
Creating decoders for process `\uart_simplex.$proc$./uart_simplex.v:11$53'.
     1/1: $1\r_CURRENT_STATE[0:0]
Creating decoders for process `\uart_simplex.$proc$./uart_simplex.v:9$52'.
     1/1: $1\r_BIT_COUNT[3:0]
Creating decoders for process `\uart_simplex.$proc$./uart_simplex.v:8$51'.
     1/1: $1\r_TX_REG[8:0]
Creating decoders for process `\uart_simplex.$proc$./uart_simplex.v:63$18'.
     1/14: $0$past$./uart_simplex.v:75$5$0[0:0]$23
     2/14: $0$past$./uart_simplex.v:71$4$0[0:0]$22
     3/14: $0$past$./uart_simplex.v:70$3$0[0:0]$21
     4/14: $0$past$./uart_simplex.v:68$2$0[0:0]$20
     5/14: $0$past$./uart_simplex.v:66$1$0[0:0]$19
     6/14: $0$formal$./uart_simplex.v:67$9_EN[0:0]$27
     7/14: $0$formal$./uart_simplex.v:67$9_CHECK[0:0]$26
     8/14: $0$formal$./uart_simplex.v:66$8_EN[0:0]$25
     9/14: $0$formal$./uart_simplex.v:66$8_CHECK[0:0]$24
    10/14: $0\r_PAST_VALID[0:0]
    11/14: $0$formal$./uart_simplex.v:70$10_EN[0:0]$29
    12/14: $0$formal$./uart_simplex.v:70$10_CHECK[0:0]$28
    13/14: $0$formal$./uart_simplex.v:73$11_EN[0:0]$31
    14/14: $0$formal$./uart_simplex.v:73$11_CHECK[0:0]$30
Creating decoders for process `\uart_simplex.$proc$./uart_simplex.v:40$15'.
     1/3: $0\r_CURRENT_STATE[0:0]
     2/3: $0\r_BIT_COUNT[3:0]
     3/3: $0\r_TX_REG[8:0]
Creating decoders for process `\uart_simplex.$proc$./uart_simplex.v:17$12'.
     1/6: $3\r_NEXT_STATE[0:0]
     2/6: $2\r_NEXT_STATE[0:0]
     3/6: $1\r_NEXT_STATE[0:0]
     4/6: $1\o_TX[0:0]
     5/6: $0\o_TX[0:0]
     6/6: $0\r_NEXT_STATE[0:0]

2.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\uart_simplex.$formal$./uart_simplex.v:61$6_CHECK' from process `\uart_simplex.$proc$./uart_simplex.v:60$55'.
No latch inferred for signal `\uart_simplex.$formal$./uart_simplex.v:61$6_EN' from process `\uart_simplex.$proc$./uart_simplex.v:60$55'.
No latch inferred for signal `\uart_simplex.\r_NEXT_STATE' from process `\uart_simplex.$proc$./uart_simplex.v:17$12'.
No latch inferred for signal `\uart_simplex.\o_TX' from process `\uart_simplex.$proc$./uart_simplex.v:17$12'.

2.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\uart_simplex.\r_PAST_VALID' using process `\uart_simplex.$proc$./uart_simplex.v:63$18'.
  created $dff cell `$procdff$102' with positive edge clock.
Creating register for signal `\uart_simplex.$past$./uart_simplex.v:66$1$0' using process `\uart_simplex.$proc$./uart_simplex.v:63$18'.
  created $dff cell `$procdff$103' with positive edge clock.
Creating register for signal `\uart_simplex.$past$./uart_simplex.v:68$2$0' using process `\uart_simplex.$proc$./uart_simplex.v:63$18'.
  created $dff cell `$procdff$104' with positive edge clock.
Creating register for signal `\uart_simplex.$past$./uart_simplex.v:70$3$0' using process `\uart_simplex.$proc$./uart_simplex.v:63$18'.
  created $dff cell `$procdff$105' with positive edge clock.
Creating register for signal `\uart_simplex.$past$./uart_simplex.v:71$4$0' using process `\uart_simplex.$proc$./uart_simplex.v:63$18'.
  created $dff cell `$procdff$106' with positive edge clock.
Creating register for signal `\uart_simplex.$past$./uart_simplex.v:75$5$0' using process `\uart_simplex.$proc$./uart_simplex.v:63$18'.
  created $dff cell `$procdff$107' with positive edge clock.
Creating register for signal `\uart_simplex.$formal$./uart_simplex.v:66$8_CHECK' using process `\uart_simplex.$proc$./uart_simplex.v:63$18'.
  created $dff cell `$procdff$108' with positive edge clock.
Creating register for signal `\uart_simplex.$formal$./uart_simplex.v:66$8_EN' using process `\uart_simplex.$proc$./uart_simplex.v:63$18'.
  created $dff cell `$procdff$109' with positive edge clock.
Creating register for signal `\uart_simplex.$formal$./uart_simplex.v:67$9_CHECK' using process `\uart_simplex.$proc$./uart_simplex.v:63$18'.
  created $dff cell `$procdff$110' with positive edge clock.
Creating register for signal `\uart_simplex.$formal$./uart_simplex.v:67$9_EN' using process `\uart_simplex.$proc$./uart_simplex.v:63$18'.
  created $dff cell `$procdff$111' with positive edge clock.
Creating register for signal `\uart_simplex.$formal$./uart_simplex.v:70$10_CHECK' using process `\uart_simplex.$proc$./uart_simplex.v:63$18'.
  created $dff cell `$procdff$112' with positive edge clock.
Creating register for signal `\uart_simplex.$formal$./uart_simplex.v:70$10_EN' using process `\uart_simplex.$proc$./uart_simplex.v:63$18'.
  created $dff cell `$procdff$113' with positive edge clock.
Creating register for signal `\uart_simplex.$formal$./uart_simplex.v:73$11_CHECK' using process `\uart_simplex.$proc$./uart_simplex.v:63$18'.
  created $dff cell `$procdff$114' with positive edge clock.
Creating register for signal `\uart_simplex.$formal$./uart_simplex.v:73$11_EN' using process `\uart_simplex.$proc$./uart_simplex.v:63$18'.
  created $dff cell `$procdff$115' with positive edge clock.
Creating register for signal `\uart_simplex.\r_CURRENT_STATE' using process `\uart_simplex.$proc$./uart_simplex.v:40$15'.
  created $dff cell `$procdff$116' with positive edge clock.
Creating register for signal `\uart_simplex.\r_TX_REG' using process `\uart_simplex.$proc$./uart_simplex.v:40$15'.
  created $dff cell `$procdff$117' with positive edge clock.
Creating register for signal `\uart_simplex.\r_BIT_COUNT' using process `\uart_simplex.$proc$./uart_simplex.v:40$15'.
  created $dff cell `$procdff$118' with positive edge clock.

2.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `uart_simplex.$proc$./uart_simplex.v:73$65'.
Removing empty process `uart_simplex.$proc$./uart_simplex.v:70$63'.
Removing empty process `uart_simplex.$proc$./uart_simplex.v:67$61'.
Removing empty process `uart_simplex.$proc$./uart_simplex.v:66$59'.
Removing empty process `uart_simplex.$proc$./uart_simplex.v:60$55'.
Removing empty process `uart_simplex.$proc$./uart_simplex.v:59$54'.
Removing empty process `uart_simplex.$proc$./uart_simplex.v:11$53'.
Removing empty process `uart_simplex.$proc$./uart_simplex.v:9$52'.
Removing empty process `uart_simplex.$proc$./uart_simplex.v:8$51'.
Found and cleaned up 2 empty switches in `\uart_simplex.$proc$./uart_simplex.v:63$18'.
Removing empty process `uart_simplex.$proc$./uart_simplex.v:63$18'.
Found and cleaned up 1 empty switch in `\uart_simplex.$proc$./uart_simplex.v:40$15'.
Removing empty process `uart_simplex.$proc$./uart_simplex.v:40$15'.
Found and cleaned up 3 empty switches in `\uart_simplex.$proc$./uart_simplex.v:17$12'.
Removing empty process `uart_simplex.$proc$./uart_simplex.v:17$12'.
Cleaned up 6 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_simplex.
<suppressed ~17 debug messages>

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_simplex..
Removed 3 unused cells and 58 unused wires.
<suppressed ~4 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module uart_simplex..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_simplex.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_simplex'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart_simplex..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$88.
    dead port 1/2 on $mux $procmux$94.
Removed 2 multiplexer ports.
<suppressed ~8 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart_simplex.
Performed a total of 0 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_simplex'.
Removed a total of 0 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_simplex..
Removed 0 unused cells and 10 unused wires.
<suppressed ~4 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_simplex.

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart_simplex..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart_simplex.
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_simplex'.
Removed a total of 0 cells.

2.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_simplex..

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_simplex.

2.6.16. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 4) from port B of cell uart_simplex.$eq$./uart_simplex.v:31$14 ($eq).
Removed top 31 bits (of 32) from port B of cell uart_simplex.$add$./uart_simplex.v:51$16 ($add).
Removed top 28 bits (of 32) from port Y of cell uart_simplex.$add$./uart_simplex.v:51$16 ($add).
Removed top 31 bits (of 32) from port B of cell uart_simplex.$and$./uart_simplex.v:68$35 ($and).
Removed top 31 bits (of 32) from port Y of cell uart_simplex.$and$./uart_simplex.v:68$35 ($and).
Removed top 2 bits (of 8) from port B of cell uart_simplex.$eq$./uart_simplex.v:67$33 ($eq).
Removed top 31 bits (of 32) from port B of cell uart_simplex.$and$./uart_simplex.v:68$37 ($and).
Removed top 31 bits (of 32) from port Y of cell uart_simplex.$and$./uart_simplex.v:68$37 ($and).
Removed top 28 bits (of 32) from wire uart_simplex.$add$./uart_simplex.v:51$16_Y.
Removed top 31 bits (of 32) from wire uart_simplex.$and$./uart_simplex.v:68$35_Y.
Removed top 31 bits (of 32) from wire uart_simplex.$and$./uart_simplex.v:68$37_Y.

2.8. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_simplex..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_simplex.
<suppressed ~2 debug messages>

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_simplex'.
Removed a total of 0 cells.

2.11.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_simplex..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.11.5. Finished fast OPT passes.

2.12. Printing statistics.

=== uart_simplex ===

   Number of wires:                 39
   Number of wire bits:             71
   Number of public wires:           9
   Number of public wire bits:      27
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 41
     $add                            1
     $assert                         1
     $assume                         3
     $cover                          1
     $dff                           12
     $eq                             2
     $initstate                      1
     $logic_and                      3
     $logic_not                      2
     $mux                            8
     $ne                             1
     $not                            2
     $pmux                           4

2.13. Executing CHECK pass (checking for obvious problems).
checking module uart_simplex..
found and reported 0 problems.

3. Executing MEMORY_NORDFF pass (extracting $dff cells from $mem).

4. Executing ASYNC2SYNC pass.

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_simplex..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

6. Executing SETUNDEF pass (replace undef values with defined constants).

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_simplex.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_simplex'.
Removed a total of 0 cells.

7.3. Executing OPT_RMDFF pass (remove dff with constant values).

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_simplex..

7.5. Finished fast OPT passes.

8. Executing CHECK pass (checking for obvious problems).
checking module uart_simplex..
found and reported 0 problems.

9. Executing HIERARCHY pass (managing design hierarchy).

9.1. Analyzing design hierarchy..
Top module:  \uart_simplex

9.2. Analyzing design hierarchy..
Top module:  \uart_simplex
Removed 0 unused modules.
Module uart_simplex directly or indirectly contains formal properties -> setting "keep" attribute.

10. Executing ILANG backend.
Output filename: ../model/design.il

End of script. Logfile hash: d13c511937
CPU: user 0.03s system 0.01s, MEM: 17.95 MB total, 9.11 MB resident
Yosys 0.9 (git sha1 UNKNOWN, clang 9.0.0 -march=x86-64 -mtune=generic -O2 -fno-plt -fPIC -Os)
Time spent: 29% 7x opt_clean (0 sec), 18% 6x opt_expr (0 sec), ...
